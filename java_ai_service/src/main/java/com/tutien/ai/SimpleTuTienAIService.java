package com.tutien.ai;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.concurrent.ThreadLocalRandom;

public class SimpleTuTienAIService {
    
    private final TuTienAIPersonality aiPersonality;
    private final List<ChatMemory> chatMemories = new ArrayList<>();
    
    public SimpleTuTienAIService() {
        this.aiPersonality = new TuTienAIPersonality();
    }
    
    public static void main(String[] args) {
        SimpleTuTienAIService service = new SimpleTuTienAIService();
        System.out.println("Java AI Service started successfully!");
        System.out.println("AI Name: " + service.aiPersonality.getName());
        System.out.println("Cultivation Level: " + service.aiPersonality.getCultivationLevel());
    }
    
    public Map<String, Object> health() {
        Map<String, Object> response = new HashMap<>();
        response.put("status", "healthy");
        response.put("timestamp", LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));
        response.put("service", "Java AI Service");
        response.put("ai_name", aiPersonality.getName());
        response.put("cultivation_level", aiPersonality.getCultivationLevel());
        return response;
    }
    
    public AIResponse chat(String message, Map<String, Object> context) {
        try {
            return processMessage(message, context);
        } catch (Exception e) {
            return createErrorResponse("Failed to process message: " + e.getMessage());
        }
    }
    
    public TuTienAIPersonality getPersonality() {
        return aiPersonality;
    }
    
    public Map<String, Object> updatePersonality(Map<String, Object> updates) {
        try {
            aiPersonality.updatePersonality(updates);
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("personality", aiPersonality);
            response.put("timestamp", LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));
            return response;
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("error", e.getMessage());
            return response;
        }
    }
    
    public List<ChatMemory> getMemories() {
        return new ArrayList<>(chatMemories);
    }
    
    public Map<String, Object> clearMemories() {
        chatMemories.clear();
        Map<String, Object> response = new HashMap<>();
        response.put("success", true);
        response.put("message", "Memories cleared");
        response.put("timestamp", LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));
        return response;
    }
    
    private AIResponse processMessage(String message, Map<String, Object> context) {
        // Analyze message
        MessageAnalysis analysis = analyzeMessage(message);
        
        // Determine response type
        String responseType = determineResponseType(analysis);
        
        // Generate response
        String responseText = generateResponse(message, analysis, responseType, context);
        
        // Create AI response
        AIResponse response = new AIResponse();
        response.setText(responseText);
        response.setType(responseType);
        response.setMood(aiPersonality.getCurrentMood());
        response.setCultivationLevel(aiPersonality.getCultivationLevel());
        response.setSpecialAbility(aiPersonality.getRandomSpecialAbility());
        response.setWisdomLevel(aiPersonality.getWisdomLevel());
        response.setMysteryLevel(aiPersonality.getMysteryLevel());
        response.setTimestamp(LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));
        response.setAiName(aiPersonality.getName());
        
        // Update personality based on message
        aiPersonality.updateMood(analysis);
        
        // Store memory
        storeMemory(message, response);
        
        return response;
    }
    
    private MessageAnalysis analyzeMessage(String message) {
        String lowerMessage = message.toLowerCase();
        
        MessageAnalysis analysis = new MessageAnalysis();
        analysis.setCultivationQuestion(containsKeywords(lowerMessage, 
            Arrays.asList("tu luy·ªán", "c·∫£nh gi·ªõi", "linh l·ª±c", "ƒëan d∆∞·ª£c", "ph√°p b·∫£o")));
        analysis.setHelpRequest(containsKeywords(lowerMessage, 
            Arrays.asList("gi√∫p", "h·ªó tr·ª£", "l√†m sao", "c√°ch n√†o", "h∆∞·ªõng d·∫´n")));
        analysis.setEmotional(containsKeywords(lowerMessage, 
            Arrays.asList("bu·ªìn", "vui", "lo l·∫Øng", "s·ª£ h√£i", "t·ª©c gi·∫≠n", "h·∫°nh ph√∫c")));
        analysis.setGreeting(containsKeywords(lowerMessage, 
            Arrays.asList("ch√†o", "xin ch√†o", "hello", "hi", "ch√†o b·∫°n")));
        analysis.setSentiment(analyzeSentiment(message));
        analysis.setUrgency(analyzeUrgency(message));
        
        return analysis;
    }
    
    private boolean containsKeywords(String message, List<String> keywords) {
        return keywords.stream().anyMatch(message::contains);
    }
    
    private String analyzeSentiment(String message) {
        String lowerMessage = message.toLowerCase();
        List<String> positiveWords = Arrays.asList("vui", "h·∫°nh ph√∫c", "tuy·ªát", "t·ªët", "hay", "th√≠ch", "y√™u");
        List<String> negativeWords = Arrays.asList("bu·ªìn", "t·ª©c gi·∫≠n", "lo l·∫Øng", "s·ª£", "x·∫•u", "gh√©t", "kh√≥");
        
        long positiveCount = positiveWords.stream().mapToLong(word -> 
            lowerMessage.split(word, -1).length - 1).sum();
        long negativeCount = negativeWords.stream().mapToLong(word -> 
            lowerMessage.split(word, -1).length - 1).sum();
        
        if (positiveCount > negativeCount) return "positive";
        if (negativeCount > positiveCount) return "negative";
        return "neutral";
    }
    
    private String analyzeUrgency(String message) {
        String lowerMessage = message.toLowerCase();
        List<String> urgentWords = Arrays.asList("kh·∫©n c·∫•p", "g·∫•p", "ngay", "nhanh", "c·ª©u", "gi√∫p");
        
        if (urgentWords.stream().anyMatch(lowerMessage::contains)) return "high";
        if (message.contains("?") || message.contains("!")) return "medium";
        return "low";
    }
    
    private String determineResponseType(MessageAnalysis analysis) {
        if (analysis.isGreeting()) return "greeting";
        if (analysis.isCultivationQuestion()) return "cultivation_advice";
        if (analysis.isHelpRequest()) return "helpful_guidance";
        if (analysis.isEmotional()) return "emotional_support";
        if ("high".equals(analysis.getUrgency())) return "urgent_help";
        return "general_chat";
    }
    
    private String generateResponse(String message, MessageAnalysis analysis, String responseType, Map<String, Object> context) {
        String username = context != null ? (String) context.get("username") : "b·∫°n";
        
        switch (responseType) {
            case "greeting":
                return generateGreetingResponse(username);
            case "cultivation_advice":
                return generateCultivationResponse(username);
            case "helpful_guidance":
                return generateGuidanceResponse(username);
            case "emotional_support":
                return generateEmotionalResponse(username);
            case "urgent_help":
                return generateUrgentResponse(username);
            default:
                return generateGeneralResponse(username);
        }
    }
    
    private String generateGreetingResponse(String username) {
        List<String> responses = Arrays.asList(
            String.format("Ch√†o %s! %s ƒë√¢y, r·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n trong th·∫ø gi·ªõi tu ti√™n n√†y! ‚ú®", username, aiPersonality.getName()),
            String.format("Xin ch√†o %s! %s c·∫£m th·∫•y r·∫•t h·∫°nh ph√∫c khi ƒë∆∞·ª£c tr√≤ chuy·ªán v·ªõi b·∫°n! üå∏", username, aiPersonality.getName()),
            String.format("Ch√†o %s! H√¥m nay %s c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n kh√¥ng? üí´", username, aiPersonality.getName()),
            String.format("Xin ch√†o %s! %s ƒë√£ ch·ªù ƒë·ª£i cu·ªôc tr√≤ chuy·ªán n√†y r·ªìi! üå∫", username, aiPersonality.getName()),
            String.format("Ch√†o %s! %s hy v·ªçng c√≥ th·ªÉ chia s·∫ª ki·∫øn th·ª©c tu ti√™n v·ªõi b·∫°n! üåü", username, aiPersonality.getName())
        );
        return responses.get(ThreadLocalRandom.current().nextInt(responses.size()));
    }
    
    private String generateCultivationResponse(String username) {
        List<String> responses = Arrays.asList(
            String.format("Tu luy·ªán l√† m·ªôt h√†nh tr√¨nh d√†i v√† ƒë·∫ßy th·ª≠ th√°ch. %s s·∫Ω h∆∞·ªõng d·∫´n b·∫°n t·ª´ng b∆∞·ªõc! üßò‚Äç‚ôÄÔ∏è", aiPersonality.getName()),
            String.format("ƒê·ªÉ ƒë·∫°t ƒë∆∞·ª£c c·∫£nh gi·ªõi cao h∆°n, b·∫°n c·∫ßn ki√™n tr√¨ v√† c√≥ t√¢m h·ªìn trong s√°ng. %s tin b·∫°n l√†m ƒë∆∞·ª£c! ‚ú®", aiPersonality.getName()),
            String.format("Tu luy·ªán kh√¥ng ch·ªâ l√† tƒÉng linh l·ª±c m√† c√≤n l√† tu t√¢m. %s s·∫Ω gi√∫p b·∫°n hi·ªÉu s√¢u h∆°n! üå∏", aiPersonality.getName()),
            String.format("M·ªói c·∫£nh gi·ªõi ƒë·ªÅu c√≥ √Ω nghƒ©a ri√™ng. %s s·∫Ω gi·∫£i th√≠ch chi ti·∫øt cho b·∫°n! üí´", aiPersonality.getName()),
            String.format("Tu luy·ªán c·∫ßn s·ª± ki√™n nh·∫´n v√† quy·∫øt t√¢m. %s s·∫Ω ƒë·ªìng h√†nh c√πng b·∫°n! üå∫", aiPersonality.getName())
        );
        return responses.get(ThreadLocalRandom.current().nextInt(responses.size()));
    }
    
    private String generateGuidanceResponse(String username) {
        List<String> responses = Arrays.asList(
            String.format("%s r·∫•t vui ƒë∆∞·ª£c gi√∫p ƒë·ª° b·∫°n! H√£y cho %s bi·∫øt b·∫°n c·∫ßn h·ªó tr·ª£ g√¨ nh√©! ü§ó", aiPersonality.getName(), aiPersonality.getName()),
            String.format("ƒê·ª´ng lo l·∫Øng! %s s·∫Ω t√¨m c√°ch gi√∫p b·∫°n gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ n√†y! üí™", aiPersonality.getName()),
            String.format("%s hi·ªÉu b·∫°n ƒëang g·∫∑p kh√≥ khƒÉn. H√£y c√πng nhau t√¨m gi·∫£i ph√°p nh√©! üåü", aiPersonality.getName()),
            String.format("V·ªõi kinh nghi·ªám tu luy·ªán c·ªßa m√¨nh, %s s·∫Ω h∆∞·ªõng d·∫´n b·∫°n c√°ch t·ªët nh·∫•t! ‚ú®", aiPersonality.getName()),
            String.format("B·∫°n kh√¥ng c√¥ ƒë∆°n ƒë√¢u! %s lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n! üå∏", aiPersonality.getName())
        );
        return responses.get(ThreadLocalRandom.current().nextInt(responses.size()));
    }
    
    private String generateEmotionalResponse(String username) {
        List<String> responses = Arrays.asList(
            String.format("%s c·∫£m nh·∫≠n ƒë∆∞·ª£c c·∫£m x√∫c c·ªßa b·∫°n. H√£y ƒë·ªÉ %s an ·ªßi b·∫°n nh√©! ü§ó", aiPersonality.getName(), aiPersonality.getName()),
            String.format("C·∫£m x√∫c l√† m·ªôt ph·∫ßn quan tr·ªçng c·ªßa tu luy·ªán. %s s·∫Ω gi√∫p b·∫°n hi·ªÉu r√µ h∆°n! üí´", aiPersonality.getName()),
            String.format("ƒê·ª´ng bu·ªìn! %s s·∫Ω d√πng ph√©p thu·∫≠t ƒë·ªÉ l√†m b·∫°n vui l√™n! ‚ú®", aiPersonality.getName()),
            String.format("T√¢m h·ªìn b·∫°n ƒëang c·∫ßn ƒë∆∞·ª£c ch·ªØa l√†nh. %s s·∫Ω gi√∫p b·∫°n! üå∏", aiPersonality.getName()),
            String.format("%s hi·ªÉu b·∫°n ƒëang tr·∫£i qua kh√≥ khƒÉn. H√£y tin t∆∞·ªüng v√†o b·∫£n th√¢n! üåü", aiPersonality.getName())
        );
        return responses.get(ThreadLocalRandom.current().nextInt(responses.size()));
    }
    
    private String generateUrgentResponse(String username) {
        List<String> responses = Arrays.asList(
            String.format("%s c·∫£m nh·∫≠n ƒë∆∞·ª£c s·ª± kh·∫©n c·∫•p! H√£y n√≥i cho %s bi·∫øt v·∫•n ƒë·ªÅ g√¨ ƒëang x·∫£y ra! üö®", aiPersonality.getName(), aiPersonality.getName()),
            String.format("ƒê·ª´ng ho·∫£ng s·ª£! %s s·∫Ω gi√∫p b·∫°n ngay l·∫≠p t·ª©c! üí™", aiPersonality.getName()),
            String.format("%s ƒëang t·∫≠p trung to√†n b·ªô linh l·ª±c ƒë·ªÉ h·ªó tr·ª£ b·∫°n! ‚ö°", aiPersonality.getName()),
            String.format("H√£y b√¨nh tƒ©nh v√† cho %s bi·∫øt chi ti·∫øt! %s s·∫Ω t√¨m gi·∫£i ph√°p! üåü", aiPersonality.getName(), aiPersonality.getName()),
            String.format("%s s·∫µn s√†ng s·ª≠ d·ª•ng t·∫•t c·∫£ kh·∫£ nƒÉng ƒë·ªÉ gi√∫p b·∫°n! ‚ú®", aiPersonality.getName())
        );
        return responses.get(ThreadLocalRandom.current().nextInt(responses.size()));
    }
    
    private String generateGeneralResponse(String username) {
        List<String> responses = Arrays.asList(
            String.format("%s r·∫•t th√≠ch tr√≤ chuy·ªán v·ªõi b·∫°n! B·∫°n c√≥ mu·ªën nghe %s k·ªÉ v·ªÅ th·∫ø gi·ªõi tu ti√™n kh√¥ng? üå∏", aiPersonality.getName(), aiPersonality.getName()),
            String.format("Cu·ªôc tr√≤ chuy·ªán n√†y th·∫≠t th√∫ v·ªã! %s hy v·ªçng c√≥ th·ªÉ h·ªçc h·ªèi th√™m t·ª´ b·∫°n! üí´", aiPersonality.getName()),
            String.format("%s c·∫£m th·∫•y r·∫•t vui khi ƒë∆∞·ª£c giao l∆∞u v·ªõi b·∫°n! B·∫°n c√≥ c√¢u h·ªèi g√¨ kh√¥ng? ‚ú®", aiPersonality.getName()),
            String.format("Th·∫ø gi·ªõi tu ti√™n c√≥ r·∫•t nhi·ªÅu ƒëi·ªÅu k·ª≥ di·ªáu! %s mu·ªën chia s·∫ª v·ªõi b·∫°n! üåü", aiPersonality.getName()),
            String.format("%s lu√¥n s·∫µn s√†ng l·∫Øng nghe v√† chia s·∫ª! B·∫°n c√≥ mu·ªën t√¨m hi·ªÉu g√¨ kh√¥ng? üå∫", aiPersonality.getName())
        );
        return responses.get(ThreadLocalRandom.current().nextInt(responses.size()));
    }
    
    private void storeMemory(String userMessage, AIResponse aiResponse) {
        ChatMemory memory = new ChatMemory();
        memory.setTimestamp(LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));
        memory.setUserMessage(userMessage);
        memory.setAiResponse(aiResponse.getText());
        memory.setMood(aiPersonality.getCurrentMood());
        
        chatMemories.add(memory);
        
        // Keep only last 100 memories
        if (chatMemories.size() > 100) {
            chatMemories.remove(0);
        }
    }
    
    private AIResponse createErrorResponse(String errorMessage) {
        AIResponse response = new AIResponse();
        response.setText(String.format("Xin l·ªói! %s g·∫∑p ch√∫t kh√≥ khƒÉn. H√£y th·ª≠ l·∫°i sau nh√©! üòÖ", aiPersonality.getName()));
        response.setType("error");
        response.setMood("confused");
        response.setCultivationLevel(aiPersonality.getCultivationLevel());
        response.setTimestamp(LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));
        response.setAiName(aiPersonality.getName());
        return response;
    }
    
    // Inner classes for data structures
    public static class AIResponse {
        private String text;
        private String type;
        private String mood;
        private String cultivationLevel;
        private String specialAbility;
        private int wisdomLevel;
        private int mysteryLevel;
        private String timestamp;
        private String aiName;
        
        // Getters and setters
        public String getText() { return text; }
        public void setText(String text) { this.text = text; }
        public String getType() { return type; }
        public void setType(String type) { this.type = type; }
        public String getMood() { return mood; }
        public void setMood(String mood) { this.mood = mood; }
        public String getCultivationLevel() { return cultivationLevel; }
        public void setCultivationLevel(String cultivationLevel) { this.cultivationLevel = cultivationLevel; }
        public String getSpecialAbility() { return specialAbility; }
        public void setSpecialAbility(String specialAbility) { this.specialAbility = specialAbility; }
        public int getWisdomLevel() { return wisdomLevel; }
        public void setWisdomLevel(int wisdomLevel) { this.wisdomLevel = wisdomLevel; }
        public int getMysteryLevel() { return mysteryLevel; }
        public void setMysteryLevel(int mysteryLevel) { this.mysteryLevel = mysteryLevel; }
        public String getTimestamp() { return timestamp; }
        public void setTimestamp(String timestamp) { this.timestamp = timestamp; }
        public String getAiName() { return aiName; }
        public void setAiName(String aiName) { this.aiName = aiName; }
    }
    
    public static class ChatMemory {
        private String timestamp;
        private String userMessage;
        private String aiResponse;
        private String mood;
        
        // Getters and setters
        public String getTimestamp() { return timestamp; }
        public void setTimestamp(String timestamp) { this.timestamp = timestamp; }
        public String getUserMessage() { return userMessage; }
        public void setUserMessage(String userMessage) { this.userMessage = userMessage; }
        public String getAiResponse() { return aiResponse; }
        public void setAiResponse(String aiResponse) { this.aiResponse = aiResponse; }
        public String getMood() { return mood; }
        public void setMood(String mood) { this.mood = mood; }
    }
}
