{"file_contents":{"ai_helper.py":{"content":"import random\nimport os\nfrom datetime import datetime, timedelta\n\nclass CultivationAI:\n    def __init__(self):\n        # Hệ thống cảnh giới chi tiết với 9 tầng + viên mãn cho mỗi cấp\n        self.cultivation_stages = self._build_detailed_stages()\n        \n        # Cảnh giới chính và ngưỡng tổng quát\n        self.major_stages = {\n            \"Luyện Khí\": {\"min_power\": 0, \"max_power\": 10000},\n            \"Trúc Cơ\": {\"min_power\": 10000, \"max_power\": 50000},\n            \"Kết Đan\": {\"min_power\": 50000, \"max_power\": 200000},\n            \"Nguyên Anh\": {\"min_power\": 200000, \"max_power\": 1000000},\n            \"Hóa Thần\": {\"min_power\": 1000000, \"max_power\": 5000000},\n            \"Luyện Hư\": {\"min_power\": 5000000, \"max_power\": 20000000},\n            \"Hợp Thể\": {\"min_power\": 20000000, \"max_power\": 100000000},\n            \"Đại Thừa\": {\"min_power\": 100000000, \"max_power\": 500000000},\n            \"Độ Kiếp\": {\"min_power\": 500000000, \"max_power\": 2000000000},\n            \"Tản Tiên\": {\"min_power\": 2000000000, \"max_power\": 10000000000}\n        }\n    \n    def _build_detailed_stages(self):\n        \"\"\"Xây dựng hệ thống tầng chi tiết\"\"\"\n        stages = {}\n        major_stages = [\n            (\"Luyện Khí\", 0, 10000),\n            (\"Trúc Cơ\", 10000, 50000),\n            (\"Kết Đan\", 50000, 200000),\n            (\"Nguyên Anh\", 200000, 1000000),\n            (\"Hóa Thần\", 1000000, 5000000),\n            (\"Luyện Hư\", 5000000, 20000000),\n            (\"Hợp Thể\", 20000000, 100000000),\n            (\"Đại Thừa\", 100000000, 500000000),\n            (\"Độ Kiếp\", 500000000, 2000000000),\n            (\"Tản Tiên\", 2000000000, 10000000000)\n        ]\n        \n        for stage_name, min_power, max_power in major_stages:\n            power_range = max_power - min_power\n            # Chia thành 10 phần: 9 tầng + viên mãn\n            step = power_range // 10\n            \n            # 9 tầng đầu\n            for i in range(1, 10):\n                substage_min = min_power + (i - 1) * step\n                substage_max = min_power + i * step\n                stages[f\"{stage_name} Tầng {i}\"] = {\n                    \"min_power\": substage_min,\n                    \"max_power\": substage_max,\n                    \"major_stage\": stage_name\n                }\n            \n            # Tầng viên mãn\n            stages[f\"{stage_name} Viên Mãn\"] = {\n                \"min_power\": min_power + 9 * step,\n                \"max_power\": max_power,\n                \"major_stage\": stage_name\n            }\n        \n        return stages\n        \n        self.weather_conditions = [\n            \"Linh Khí Dồi Dào - Tu luyện tăng 20%\",\n            \"Thiên Lôi Tụ Tập - Nguy hiểm tăng nhưng breakthrough dễ hơn\",\n            \"Âm Dương Thái Cực - Cân bằng hoàn hảo cho tu luyện\",\n            \"Ma Khí Xâm Nhập - Tu luyện chậm nhưng tăng kháng ma\",\n            \"Thiên Nhiên Linh Khí - Tăng cường khả năng hấp thụ linh khí\"\n        ]\n    \n    def predict_cultivation_fortune(self, user):\n        \"\"\"Dự đoán vận mệnh tu luyện của người dùng\"\"\"\n        fortunes = [\n            \"Hôm nay là ngày tốt lành cho việc đột phá cảnh giới!\",\n            \"Nên tránh tu luyện công pháp mạnh trong 3 ngày tới.\",\n            \"Có cơ hội gặp được cao nhân chỉ điểm đạo pháp.\",\n            \"Thiên kiếp sắp tới, cần chuẩn bị tâm lý và tài nguyên.\",\n            \"Vận mệnh thuận lợi cho việc luyện đan dược.\",\n            \"Thích hợp khám phá bí cảnh tìm kiếm cơ duyên.\",\n            \"Nên tập trung vào tu luyện thần thức.\",\n            \"Có thể gặp phải tiểu nhân, cần cảnh giác.\",\n        ]\n        \n        # Tính toán dựa trên nhiều yếu tố\n        user_factors = (\n            user.spiritual_power % 7 +\n            user.karma_points % 5 +\n            user.reputation % 3 +\n            datetime.now().day % 8\n        ) % len(fortunes)\n        \n        return fortunes[user_factors]\n    \n    def get_cultivation_advice(self, user):\n        \"\"\"Đưa ra lời khuyên tu luyện thông minh\"\"\"\n        advice = []\n        \n        current_level = user.cultivation_level\n        stage_info = self.cultivation_stages.get(current_level)\n        \n        if not stage_info:\n            # Fallback to first stage if not found\n            stage_info = self.cultivation_stages.get(\"Luyện Khí Tầng 1\")\n        \n        # Phân tích tiến độ\n        power_range = stage_info[\"max_power\"] - stage_info[\"min_power\"]\n        if power_range > 0:\n            progress = (user.spiritual_power - stage_info[\"min_power\"]) / power_range\n        else:\n            progress = 1.0  # Max progress if no range\n        \n        if progress < 0.3:\n            advice.append(\"Nên tập trung tu luyện cơ bản để tăng nền tảng.\")\n        elif progress < 0.7:\n            advice.append(\"Có thể bắt đầu học các thuật pháp cao cấp hơn.\")\n        else:\n            advice.append(\"Chuẩn bị đột phá lên tầng cao hơn!\")\n        \n        # Phân tích tài nguyên\n        if user.spiritual_stones < 500:\n            advice.append(\"Cần tích lũy thêm linh thạch cho tu luyện.\")\n        \n        if user.pills_count < 3:\n            advice.append(\"Nên luyện hoặc mua thêm đan dược.\")\n        \n        # Phân tích hoạt động xã hội\n        if not user.guild_id:\n            advice.append(\"Tham gia môn phái sẽ có nhiều cơ hội tu luyện hơn.\")\n        \n        return advice\n    \n    def calculate_guild_war_prediction(self, guild1, guild2):\n        \"\"\"Dự đoán kết quả chiến tranh bang hội\"\"\"\n        # Tính sức mạnh tổng hợp\n        guild1_power = (guild1.level or 1) * 1000 + (guild1.treasury or 0) + (guild1.territory_count or 1) * 500\n        guild2_power = (guild2.level or 1) * 1000 + (guild2.treasury or 0) + (guild2.territory_count or 1) * 500\n        \n        # Thêm yếu tố ngẫu nhiên\n        guild1_power *= random.uniform(0.8, 1.2)\n        guild2_power *= random.uniform(0.8, 1.2)\n        \n        if guild1_power > guild2_power:\n            win_probability = min(90, 50 + (guild1_power - guild2_power) / guild1_power * 40)\n        else:\n            win_probability = max(10, 50 - (guild2_power - guild1_power) / guild2_power * 40)\n        \n        return {\n            \"guild1_win_probability\": round(win_probability, 1),\n            \"guild2_win_probability\": round(100 - win_probability, 1),\n            \"predicted_duration_days\": random.randint(3, 14),\n            \"casualty_estimate\": \"Trung bình\" if abs(guild1_power - guild2_power) < guild1_power * 0.2 else \"Cao\"\n        }\n    \n    def get_weather_forecast(self):\n        \"\"\"Dự báo thời tiết linh khí\"\"\"\n        return {\n            \"current\": random.choice(self.weather_conditions),\n            \"tomorrow\": random.choice(self.weather_conditions),\n            \"weekly_trend\": \"Linh khí sẽ dồi dào trong tuần tới\"\n        }\n    \n    def generate_expedition_route(self, difficulty, destination):\n        \"\"\"Tạo lộ trình đạo lữ thông minh\"\"\"\n        routes = {\n            1: [\"Rừng Tre Xanh\", \"Suối Linh Tuyền\", \"Đồi Hoa Lan\"],\n            2: [\"Thung Lũng Sương Mù\", \"Hang Dơi Máu\", \"Đỉnh Núi Kiếm\"],\n            3: [\"Sa Mạc Cát Vàng\", \"Đền Cổ Bỏ Hoang\", \"Hồ Nước Độc\"],\n            4: [\"Rừng Quỷ Dữ\", \"Thành Phố Ma\", \"Cổng Địa Ngục\"],\n            5: [\"Thiên Đình\", \"Cung Điện Rồng\", \"Vực Sâu Vô Đáy\"]\n        }\n        \n        base_route = routes.get(difficulty, routes[1])\n        \n        return {\n            \"waypoints\": base_route,\n            \"estimated_time\": f\"{difficulty * 6}-{difficulty * 8} giờ\",\n            \"recommended_supplies\": [\n                \"Đan dược hồi phục\",\n                \"Pháp bảo phòng thủ\", \n                \"Linh thạch dự phòng\",\n                \"Bùa hộ mạng\"\n            ],\n            \"special_events\": [\n                f\"Có 30% cơ hội gặp Linh Thú cấp {difficulty}\",\n                f\"Khả năng tìm thấy Thiên Tài Địa Bảo: {difficulty * 15}%\"\n            ]\n        }\n\n# Global AI instance\ncultivation_ai = CultivationAI()\n","size_bytes":8423},"app.py":{"content":"import os\nimport logging\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_login import LoginManager\nfrom sqlalchemy.orm import DeclarativeBase\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n\nlogging.basicConfig(level=logging.DEBUG)\n\nclass Base(DeclarativeBase):\n    pass\n\ndb = SQLAlchemy(model_class=Base)\n\n# Create the app\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\")\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)\n\n# Configure the database\ndatabase_url = os.environ.get(\"DATABASE_URL\") or \"sqlite:///tu_tien.db\"\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = database_url\n\n# Configure engine options based on database type\nif database_url.startswith(\"postgresql\"):\n    app.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n        \"pool_recycle\": 300,\n        \"pool_pre_ping\": True,\n    }\nelse:\n    app.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n        \"pool_recycle\": 300,\n        \"pool_pre_ping\": True,\n        \"connect_args\": {\"check_same_thread\": False},\n    }\n\n# Initialize extensions\ndb.init_app(app)\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'auth'  # type: ignore\n\nwith app.app_context():\n    import models\n    import routes\n    db.create_all()\n\n@login_manager.user_loader\ndef load_user(user_id):\n    from models import User\n    return User.query.get(int(user_id))\n","size_bytes":1369},"main.py":{"content":"from app import app\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":99},"models.py":{"content":"from datetime import datetime\nfrom app import db\nfrom flask_login import UserMixin\nfrom werkzeug.security import generate_password_hash, check_password_hash\nimport json\n\nclass User(UserMixin, db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(256))\n    \n    # Tu luyện attributes\n    cultivation_level = db.Column(db.String(50), default=\"Luyện Khí Tầng 1\")\n    spiritual_power = db.Column(db.Integer, default=100)\n    cultivation_points = db.Column(db.Integer, default=0)\n    \n    # Profile info\n    dao_name = db.Column(db.String(100))  # Đạo hiệu\n    sect_affiliation = db.Column(db.String(100))\n    reputation = db.Column(db.Integer, default=0)\n    karma_points = db.Column(db.Integer, default=0)\n    \n    # Resources\n    spiritual_stones = db.Column(db.Integer, default=1000)\n    pills_count = db.Column(db.Integer, default=5)\n    artifacts_count = db.Column(db.Integer, default=1)\n    \n    # Mining system\n    mining_level = db.Column(db.Integer, default=1)\n    mining_experience = db.Column(db.Integer, default=0)\n    last_mining = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Free benefits\n    free_world_opening_used = db.Column(db.Boolean, default=False)\n    \n    # Admin privileges\n    is_admin = db.Column(db.Boolean, default=False)\n    \n    # Timestamps\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    last_cultivation = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    guild_id = db.Column(db.Integer, db.ForeignKey('guild.id'))\n    owned_worlds = db.relationship('World', backref='owner', lazy=True)\n    expedition_participations = db.relationship('ExpeditionParticipant', backref='user', lazy=True)\n    \n    def set_password(self, password):\n        self.password_hash = generate_password_hash(password)\n    \n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\n    \n    def get_cultivation_stage(self):\n        stages = [\n            \"Luyện Khí\", \"Trúc Cơ\", \"Kết Đan\", \"Nguyên Anh\", \"Hóa Thần\",\n            \"Luyện Hư\", \"Hợp Thể\", \"Đại Thừa\", \"Độ Kiếp\", \"Tản Tiên\"\n        ]\n        for stage in stages:\n            if stage in self.cultivation_level:\n                return stage\n        return \"Luyện Khí\"\n    \n    def get_cultivation_substage(self):\n        \"\"\"Lấy tầng chi tiết (1-9 hoặc Viên Mãn)\"\"\"\n        level = self.cultivation_level\n        if \"Viên Mãn\" in level:\n            return \"Viên Mãn\"\n        # Tìm tầng số (1-9)\n        for i in range(1, 10):\n            if f\"Tầng {i}\" in level:\n                return f\"Tầng {i}\"\n        return \"Tầng 1\"\n\nclass Guild(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), unique=True, nullable=False)\n    description = db.Column(db.Text)\n    leader_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    \n    # Guild stats\n    level = db.Column(db.Integer, default=1)\n    experience = db.Column(db.Integer, default=0)\n    treasury = db.Column(db.Integer, default=0)\n    territory_count = db.Column(db.Integer, default=1)\n    \n    # Guild settings\n    recruitment_open = db.Column(db.Boolean, default=True)\n    min_cultivation_level = db.Column(db.String(50), default=\"Luyện Khí Tầng 1\")\n    \n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    members = db.relationship('User', backref='guild', lazy=True, foreign_keys='User.guild_id')\n    wars = db.relationship('GuildWar', backref='guild', lazy=True, foreign_keys='GuildWar.guild_id')\n    expeditions = db.relationship('Expedition', backref='organizing_guild', lazy=True)\n\nclass World(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    world_type = db.Column(db.String(50))  # Linh Giới, Ma Cảnh, Thiên Giới, etc.\n    description = db.Column(db.Text)\n    \n    # World properties\n    spiritual_density = db.Column(db.Integer, default=50)  # 0-100\n    danger_level = db.Column(db.Integer, default=1)  # 1-10\n    resource_richness = db.Column(db.Integer, default=50)  # 0-100\n    \n    # Resources\n    spiritual_stones_production = db.Column(db.Integer, default=100)\n    rare_materials_count = db.Column(db.Integer, default=0)\n    \n    # Status\n    owner_id = db.Column(db.Integer, db.ForeignKey('user.id'))\n    is_contested = db.Column(db.Boolean, default=False)\n    last_explored = db.Column(db.DateTime)\n    \n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\nclass GuildWar(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    guild_id = db.Column(db.Integer, db.ForeignKey('guild.id'), nullable=False)\n    target_guild_id = db.Column(db.Integer, db.ForeignKey('guild.id'), nullable=False)\n    \n    war_type = db.Column(db.String(50))  # \"Sát Nhập\", \"Chinh Phục\", \"Liên Minh\"\n    status = db.Column(db.String(50), default=\"Đang Diễn Ra\")  # Đang Diễn Ra, Hoàn Thành, Thất Bại\n    \n    start_time = db.Column(db.DateTime, default=datetime.utcnow)\n    end_time = db.Column(db.DateTime)\n    \n    # War results\n    winner_guild_id = db.Column(db.Integer, db.ForeignKey('guild.id'))\n    casualties = db.Column(db.Text)  # JSON string\n    rewards = db.Column(db.Text)  # JSON string\n\nclass Expedition(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    description = db.Column(db.Text)\n    \n    # Expedition details\n    destination = db.Column(db.String(100))\n    difficulty_level = db.Column(db.Integer, default=1)\n    max_participants = db.Column(db.Integer, default=5)\n    duration_hours = db.Column(db.Integer, default=24)\n    \n    # Requirements\n    min_cultivation = db.Column(db.String(50))\n    required_items = db.Column(db.Text)  # JSON string\n    \n    # Status\n    status = db.Column(db.String(50), default=\"Tuyển Thành Viên\")\n    organizer_guild_id = db.Column(db.Integer, db.ForeignKey('guild.id'))\n    start_time = db.Column(db.DateTime)\n    \n    # Rewards\n    potential_rewards = db.Column(db.Text)  # JSON string\n    \n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    participants = db.relationship('ExpeditionParticipant', backref='expedition', lazy=True)\n\nclass ExpeditionParticipant(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    expedition_id = db.Column(db.Integer, db.ForeignKey('expedition.id'), nullable=False)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    \n    joined_at = db.Column(db.DateTime, default=datetime.utcnow)\n    status = db.Column(db.String(50), default=\"Chờ Xác Nhận\")\n    contribution_points = db.Column(db.Integer, default=0)\n\nclass ChatMessage(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    content = db.Column(db.Text, nullable=False)\n    channel = db.Column(db.String(50), default=\"general\")  # general, guild, expedition\n    channel_id = db.Column(db.Integer)  # ID of guild or expedition\n    \n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    user = db.relationship('User', backref='messages', lazy=True)\n\nclass Achievement(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    title = db.Column(db.String(100), nullable=False)\n    description = db.Column(db.Text)\n    category = db.Column(db.String(50))  # cultivation, guild, expedition, etc.\n    rarity = db.Column(db.String(20), default=\"common\")  # common, rare, legendary\n    \n    earned_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    user = db.relationship('User', backref='achievements', lazy=True)\n","size_bytes":8049},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.3.0\",\n    \"flask-login>=0.6.3\",\n    \"flask>=3.1.2\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"sqlalchemy>=2.0.43\",\n    \"werkzeug>=3.1.3\",\n]\n","size_bytes":355},"replit.md":{"content":"# Tu Tiên Cộng Đồng (Celestial Cultivation Community)\n\n## Overview\n\nTu Tiên Cộng Đồng is a Vietnamese-language web-based cultivation (martial arts/fantasy) role-playing game and community platform. The application simulates a mystical cultivation world where users can develop their spiritual powers, join guilds, participate in expeditions, manage worlds, and interact with an AI-powered cultivation system. The platform combines traditional cultivation themes with modern web technologies to create an immersive gaming experience.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Template Engine**: Jinja2 templates with Flask for server-side rendering\n- **UI Framework**: Bootstrap 5.3.0 for responsive design and component styling\n- **Styling**: Custom CSS with mystical/celestial theming using CSS variables for consistent color schemes\n- **JavaScript**: Vanilla JavaScript with class-based architecture for different modules (Dashboard, ExpeditionManager, GuildManager, TuTienApp)\n- **Icons**: Font Awesome 6.4.0 for consistent iconography\n- **Interactive Elements**: Modal dialogs, tabs, progress bars, and real-time updates\n\n### Backend Architecture\n- **Web Framework**: Flask with SQLAlchemy ORM for database operations\n- **Authentication**: Flask-Login for user session management\n- **Database Models**: SQLAlchemy with declarative base, supporting Users, Guilds, Worlds, Expeditions, and related entities\n- **AI Integration**: Custom CultivationAI class for game mechanics and fortune predictions\n- **Route Structure**: Modular routing system handling authentication, dashboard, community features, and game mechanics\n\n### Data Storage Solutions\n- **Primary Database**: SQLite (configurable to PostgreSQL via DATABASE_URL environment variable)\n- **Connection Management**: SQLAlchemy with connection pooling (pool_recycle: 300s, pool_pre_ping enabled)\n- **Schema Design**: Relational model with foreign key relationships between users, guilds, expeditions, and worlds\n\n### Authentication and Authorization\n- **User Management**: Flask-Login with password hashing using Werkzeug security utilities\n- **Session Security**: Secret key-based sessions with environment variable configuration\n- **User Roles**: Implicit role system through guild membership and world ownership\n- **Password Security**: Bcrypt-style password hashing with salt\n\n### Game Systems Architecture\n- **Cultivation System**: Multi-stage progression system with spiritual power metrics\n- **Guild System**: Hierarchical organization with treasury, levels, and member management\n- **Expedition System**: Collaborative exploration with participation tracking\n- **World Management**: Resource-generating territories with ownership and contest mechanics\n- **AI Advisor**: Fortune prediction and cultivation guidance system\n\n## External Dependencies\n\n### Core Web Framework\n- Flask: Primary web framework\n- Flask-SQLAlchemy: Database ORM integration\n- Flask-Login: User authentication and session management\n- Werkzeug: WSGI utilities and security functions\n\n### Frontend Libraries\n- Bootstrap 5.3.0: CSS framework for responsive design\n- Font Awesome 6.4.0: Icon library\n- CDN-delivered assets for external library management\n\n### Database Technology\n- SQLite: Default development database\n- PostgreSQL: Production database option (configurable via DATABASE_URL)\n- SQLAlchemy: ORM with relationship management\n\n### Python Standard Library Usage\n- datetime: Time-based game mechanics and user activity tracking\n- os: Environment variable management\n- random: Game mechanics randomization\n- json: Data serialization for complex game state management\n- logging: Application monitoring and debugging\n\n### Deployment Configuration\n- ProxyFix middleware: Reverse proxy support for production deployment\n- Environment-based configuration: Database URLs and secret keys via environment variables\n- Debug mode: Configurable based on environment","size_bytes":4006},"routes.py":{"content":"from flask import render_template, request, redirect, url_for, flash, jsonify, session\nfrom flask_login import login_user, logout_user, login_required, current_user\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom datetime import datetime, timedelta\nimport json\nimport random\n\nfrom app import app, db\nfrom models import User, Guild, World, GuildWar, Expedition, ExpeditionParticipant, ChatMessage, Achievement\nfrom ai_helper import cultivation_ai\n\n@app.route('/')\ndef index():\n    # Get some statistics for the homepage\n    stats = {\n        'total_users': User.query.count(),\n        'total_guilds': Guild.query.count(),\n        'total_worlds': World.query.count(),\n        'active_expeditions': Expedition.query.filter_by(status='Đang Diễn Ra').count()\n    }\n    \n    # Recent activities\n    recent_achievements = Achievement.query.order_by(Achievement.earned_at.desc()).limit(5).all()\n    \n    return render_template('index.html', stats=stats, recent_achievements=recent_achievements)\n\n@app.route('/auth', methods=['GET', 'POST'])\ndef auth():\n    if request.method == 'POST':\n        action = request.form.get('action')\n        \n        if action == 'login':\n            username = request.form.get('username')\n            password = request.form.get('password')\n            \n            user = User.query.filter_by(username=username).first()\n            \n            if user and user.check_password(password):\n                login_user(user)\n                flash('Đăng nhập thành công!', 'success')\n                return redirect(url_for('dashboard'))\n            else:\n                flash('Tên đăng nhập hoặc mật khẩu không đúng!', 'error')\n        \n        elif action == 'register':\n            username = request.form.get('username')\n            email = request.form.get('email')\n            password = request.form.get('password')\n            dao_name = request.form.get('dao_name', '')\n            \n            if User.query.filter_by(username=username).first():\n                flash('Tên đăng nhập đã tồn tại!', 'error')\n            elif User.query.filter_by(email=email).first():\n                flash('Email đã được sử dụng!', 'error')\n            else:\n                user = User(username=username, email=email, dao_name=dao_name)\n                user.set_password(password)\n                db.session.add(user)\n                db.session.commit()\n                \n                flash('Đăng ký thành công! Hãy đăng nhập.', 'success')\n                return redirect(url_for('auth'))\n    \n    return render_template('auth.html')\n\n@app.route('/logout')\n@login_required\ndef logout():\n    logout_user()\n    flash('Đã đăng xuất thành công!', 'info')\n    return redirect(url_for('index'))\n\n@app.route('/dashboard')\n@login_required\ndef dashboard():\n    # AI predictions and advice\n    fortune = cultivation_ai.predict_cultivation_fortune(current_user)\n    advice = cultivation_ai.get_cultivation_advice(current_user)\n    weather = cultivation_ai.get_weather_forecast()\n    \n    # User's guild info\n    guild = current_user.guild\n    \n    # Recent activities\n    recent_messages = ChatMessage.query.filter_by(channel='general').order_by(ChatMessage.created_at.desc()).limit(10).all()\n    \n    # Available expeditions\n    available_expeditions = Expedition.query.filter_by(status='Tuyển Thành Viên').limit(5).all()\n    \n    return render_template('dashboard.html', \n                         fortune=fortune, \n                         advice=advice, \n                         weather=weather,\n                         guild=guild,\n                         recent_messages=recent_messages,\n                         available_expeditions=available_expeditions)\n\n@app.route('/world-management')\n@login_required\ndef world_management():\n    owned_worlds = current_user.owned_worlds\n    available_worlds = World.query.filter_by(owner_id=None).all()\n    contested_worlds = World.query.filter_by(is_contested=True).all()\n    \n    return render_template('world_management.html', \n                         owned_worlds=owned_worlds,\n                         available_worlds=available_worlds,\n                         contested_worlds=contested_worlds)\n\n@app.route('/guild-management')\n@login_required\ndef guild_management():\n    user_guild = current_user.guild\n    all_guilds = Guild.query.all()\n    \n    # Guild wars\n    active_wars = GuildWar.query.filter_by(status='Đang Diễn Ra').all()\n    \n    # War predictions if user is guild leader\n    war_predictions = []\n    if user_guild and user_guild.leader_id == current_user.id:\n        for guild in all_guilds:\n            if guild.id != user_guild.id:\n                prediction = cultivation_ai.calculate_guild_war_prediction(user_guild, guild)\n                prediction['target_guild'] = guild\n                war_predictions.append(prediction)\n    \n    return render_template('guild_management.html',\n                         user_guild=user_guild,\n                         all_guilds=all_guilds,\n                         active_wars=active_wars,\n                         war_predictions=war_predictions)\n\n@app.route('/expeditions')\n@login_required\ndef expeditions():\n    available_expeditions = Expedition.query.filter_by(status='Tuyển Thành Viên').all()\n    active_expeditions = Expedition.query.filter_by(status='Đang Diễn Ra').all()\n    user_expeditions = Expedition.query.join(ExpeditionParticipant).filter(ExpeditionParticipant.user_id == current_user.id).all()\n    \n    return render_template('expeditions.html',\n                         available_expeditions=available_expeditions,\n                         active_expeditions=active_expeditions,\n                         user_expeditions=user_expeditions)\n\n@app.route('/rankings')\n@login_required\ndef rankings():\n    # Different ranking categories\n    power_rankings = User.query.order_by(User.spiritual_power.desc()).limit(50).all()\n    reputation_rankings = User.query.order_by(User.reputation.desc()).limit(50).all()\n    guild_rankings = Guild.query.order_by(Guild.level.desc(), Guild.experience.desc()).limit(30).all()\n    \n    # Weekly achievements\n    week_ago = datetime.now() - timedelta(days=7)\n    recent_achievements = Achievement.query.filter(Achievement.earned_at >= week_ago).order_by(Achievement.earned_at.desc()).all()\n    \n    return render_template('rankings.html',\n                         power_rankings=power_rankings,\n                         reputation_rankings=reputation_rankings,\n                         guild_rankings=guild_rankings,\n                         recent_achievements=recent_achievements)\n\n@app.route('/community')\n@login_required\ndef community():\n    # Recent messages from different channels\n    general_messages = ChatMessage.query.filter_by(channel='general').order_by(ChatMessage.created_at.desc()).limit(20).all()\n    \n    guild_messages = []\n    if current_user.guild_id:\n        guild_messages = ChatMessage.query.filter_by(channel='guild', channel_id=current_user.guild_id).order_by(ChatMessage.created_at.desc()).limit(20).all()\n    \n    return render_template('community.html',\n                         general_messages=general_messages,\n                         guild_messages=guild_messages)\n\n@app.route('/profile')\n@login_required\ndef profile():\n    user_achievements = current_user.achievements\n    user_expeditions = Expedition.query.join(ExpeditionParticipant).filter(ExpeditionParticipant.user_id == current_user.id).all()\n    \n    return render_template('profile.html',\n                         user_achievements=user_achievements,\n                         user_expeditions=user_expeditions)\n\n# API Routes\n@app.route('/api/cultivate', methods=['POST'])\n@login_required\ndef cultivate():\n    # Simple cultivation system with bounds checking\n    base_gain = random.randint(50, 200)\n    \n    # Prevent integer overflow\n    if current_user.spiritual_power > 999999999 - base_gain:\n        base_gain = min(base_gain, 999999999 - current_user.spiritual_power)\n    \n    current_user.spiritual_power += base_gain\n    current_user.cultivation_points += base_gain // 10\n    current_user.last_cultivation = datetime.utcnow()\n    \n    # Check for level up using detailed stage system\n    current_level = current_user.cultivation_level\n    stage_info = cultivation_ai.cultivation_stages.get(current_level)\n    \n    if stage_info and current_user.spiritual_power >= stage_info[\"max_power\"]:\n        # Determine next level\n        current_stage = current_user.get_cultivation_stage()\n        current_substage = current_user.get_cultivation_substage()\n        \n        new_level = None\n        achievement_type = \"common\"\n        \n        if \"Viên Mãn\" in current_level:\n            # Advance to next major stage\n            major_stages = [\"Luyện Khí\", \"Trúc Cơ\", \"Kết Đan\", \"Nguyên Anh\", \"Hóa Thần\",\n                           \"Luyện Hư\", \"Hợp Thể\", \"Đại Thừa\", \"Độ Kiếp\", \"Tản Tiên\"]\n            try:\n                current_major_index = major_stages.index(current_stage)\n                if current_major_index < len(major_stages) - 1:\n                    next_major_stage = major_stages[current_major_index + 1]\n                    new_level = f\"{next_major_stage} Tầng 1\"\n                    achievement_type = \"legendary\"\n            except ValueError:\n                pass\n        elif \"Tầng\" in current_level:\n            # Advance within current major stage\n            for i in range(1, 9):\n                if f\"Tầng {i}\" in current_level:\n                    if i < 9:\n                        new_level = current_level.replace(f\"Tầng {i}\", f\"Tầng {i+1}\")\n                    else:\n                        new_level = current_level.replace(f\"Tầng {i}\", \"Viên Mãn\")\n                        achievement_type = \"rare\"\n                    break\n        \n        if new_level and new_level in cultivation_ai.cultivation_stages:\n            old_level = current_user.cultivation_level\n            current_user.cultivation_level = new_level\n            \n            # Add achievement\n            if achievement_type == \"legendary\":\n                title = f\"Đại Đột Phá {current_stage}\"\n                description = f\"Viên mãn {current_stage}, đột phá lên {current_user.get_cultivation_stage()}\"\n            elif achievement_type == \"rare\":\n                title = f\"Viên Mãn {current_stage}\"\n                description = f\"Đạt tới viên mãn cảnh giới {current_stage}\"\n            else:\n                title = f\"Tiến Bộ {current_stage}\"\n                description = f\"Từ {old_level} lên {new_level}\"\n            \n            achievement = Achievement(\n                user_id=current_user.id,\n                title=title,\n                description=description,\n                category=\"cultivation\",\n                rarity=achievement_type\n            )\n            db.session.add(achievement)\n    \n    db.session.commit()\n    \n    return jsonify({\n        'success': True,\n        'power_gained': base_gain,\n        'new_total': current_user.spiritual_power,\n        'cultivation_level': current_user.cultivation_level\n    })\n\n@app.route('/api/mine-stones', methods=['POST'])\n@login_required\ndef mine_stones():\n    # Admin users can mine without cooldown\n    if not current_user.is_admin:\n        # Check if user can mine (every 2 hours)\n        if current_user.last_mining:\n            time_diff = datetime.utcnow() - current_user.last_mining\n            if time_diff.total_seconds() < 7200:  # 2 hours cooldown\n                remaining = 7200 - time_diff.total_seconds()\n                return jsonify({\n                    'success': False, \n                    'error': f'Còn {int(remaining//60)} phút nữa mới có thể đào tiếp!',\n                    'cooldown': remaining\n                })\n    \n    # Calculate mining yield based on level\n    base_yield = 50 + (current_user.mining_level * 25)\n    mining_bonus = random.randint(0, current_user.mining_level * 10)\n    total_yield = base_yield + mining_bonus\n    \n    # Add stones to user\n    current_user.spiritual_stones += total_yield\n    current_user.mining_experience += 10\n    current_user.last_mining = datetime.utcnow()\n    \n    # Check for mining level up\n    level_up = False\n    if current_user.mining_experience >= (current_user.mining_level * 100):\n        current_user.mining_level += 1\n        current_user.mining_experience = 0\n        level_up = True\n    \n    db.session.commit()\n    \n    return jsonify({\n        'success': True,\n        'stones_mined': total_yield,\n        'new_total': current_user.spiritual_stones,\n        'mining_level': current_user.mining_level,\n        'mining_exp': current_user.mining_experience,\n        'level_up': level_up\n    })\n\n@app.route('/api/create-world-free', methods=['POST'])\n@login_required  \ndef create_world_free():\n    if current_user.free_world_opening_used:\n        return jsonify({'success': False, 'error': 'Bạn đã sử dụng lượt mở thế giới miễn phí rồi!'})\n    \n    # Validate JSON request\n    if not request.json:\n        return jsonify({'success': False, 'error': 'Dữ liệu JSON không hợp lệ!'})\n    \n    name = request.json.get('name')\n    world_type = request.json.get('world_type', 'Linh Giới')\n    description = request.json.get('description', '')\n    \n    if not name or len(name) < 3:\n        return jsonify({'success': False, 'error': 'Tên thế giới phải có ít nhất 3 ký tự!'})\n    \n    # Create the world\n    world = World(\n        name=name,\n        world_type=world_type,\n        description=description,\n        owner_id=current_user.id,\n        spiritual_density=random.randint(40, 80),\n        danger_level=random.randint(1, 3),\n        resource_richness=random.randint(30, 70),\n        spiritual_stones_production=random.randint(100, 300)\n    )\n    \n    # Mark free opening as used\n    current_user.free_world_opening_used = True\n    \n    try:\n        db.session.add(world)\n        db.session.commit()\n        \n        return jsonify({\n            'success': True, \n            'message': f'Đã tạo thế giới \"{name}\" thành công!',\n            'world': {\n                'id': world.id,\n                'name': world.name,\n                'type': world.world_type,\n                'spiritual_density': world.spiritual_density,\n                'production': world.spiritual_stones_production\n            }\n        })\n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'success': False, 'error': 'Lỗi khi tạo thế giới. Vui lòng thử lại!'})\n\n@app.route('/api/explore-world/<int:world_id>', methods=['POST'])\n@login_required\ndef explore_world(world_id):\n    world = World.query.get_or_404(world_id)\n    \n    # Check if user owns the world\n    if world.owner_id != current_user.id:\n        return jsonify({'success': False, 'error': 'Bạn không sở hữu thế giới này!'})\n    \n    # Check energy requirement\n    energy_cost = world.danger_level * 50\n    if current_user.spiritual_power < energy_cost:\n        return jsonify({'success': False, 'error': f'Cần {energy_cost} linh lực để khám phá!'})\n    \n    # Deduct energy\n    current_user.spiritual_power -= energy_cost\n    \n    # Calculate rewards based on world properties\n    base_stones = world.spiritual_stones_production // 10\n    bonus_stones = random.randint(base_stones, base_stones * 2)\n    \n    # Chance for rare materials\n    rare_chance = (world.resource_richness + world.spiritual_density) / 200\n    found_rare = random.random() < rare_chance\n    rare_materials = random.randint(1, 3) if found_rare else 0\n    \n    # Update rewards\n    current_user.spiritual_stones += bonus_stones\n    if found_rare:\n        world.rare_materials_count += rare_materials\n    \n    # Update exploration timestamp\n    from datetime import datetime\n    world.last_explored = datetime.utcnow()\n    \n    db.session.commit()\n    \n    rewards = {\n        'spiritual_stones': bonus_stones,\n        'rare_materials': rare_materials,\n        'energy_cost': energy_cost\n    }\n    \n    return jsonify({\n        'success': True,\n        'message': 'Khám phá thành công!',\n        'rewards': rewards\n    })\n\n@app.route('/api/upgrade-world/<int:world_id>', methods=['POST'])\n@login_required\ndef upgrade_world(world_id):\n    world = World.query.get_or_404(world_id)\n    \n    # Check if user owns the world\n    if world.owner_id != current_user.id:\n        return jsonify({'success': False, 'error': 'Bạn không sở hữu thế giới này!'})\n    \n    # Validate JSON request\n    if not request.json:\n        return jsonify({'success': False, 'error': 'Dữ liệu JSON không hợp lệ!'})\n    \n    upgrade_type = request.json.get('upgrade_type')\n    \n    # Calculate upgrade cost\n    base_cost = 5000\n    level_multiplier = (world.spiritual_density + world.resource_richness + world.danger_level) // 10\n    upgrade_cost = base_cost * (level_multiplier + 1)\n    \n    if current_user.spiritual_stones < upgrade_cost:\n        return jsonify({'success': False, 'error': f'Cần {upgrade_cost} linh thạch để nâng cấp!'})\n    \n    # Apply upgrade\n    if upgrade_type == 'spiritual_density':\n        if world.spiritual_density >= 100:\n            return jsonify({'success': False, 'error': 'Mật độ linh khí đã đạt tối đa!'})\n        world.spiritual_density = min(100, world.spiritual_density + 10)\n        upgrade_name = 'Mật Độ Linh Khí'\n    elif upgrade_type == 'resource_richness':\n        if world.resource_richness >= 100:\n            return jsonify({'success': False, 'error': 'Độ phong phú tài nguyên đã đạt tối đa!'})\n        world.resource_richness = min(100, world.resource_richness + 10)\n        upgrade_name = 'Độ Phong Phú Tài Nguyên'\n    elif upgrade_type == 'production':\n        world.spiritual_stones_production += 50\n        upgrade_name = 'Sản Xuất Linh Thạch'\n    else:\n        return jsonify({'success': False, 'error': 'Loại nâng cấp không hợp lệ!'})\n    \n    # Deduct cost\n    current_user.spiritual_stones -= upgrade_cost\n    \n    try:\n        db.session.commit()\n        \n        return jsonify({\n            'success': True,\n            'message': f'Nâng cấp {upgrade_name} thành công!',\n            'upgrade_cost': upgrade_cost,\n            'world': {\n                'spiritual_density': world.spiritual_density,\n                'resource_richness': world.resource_richness,\n                'production': world.spiritual_stones_production\n            }\n        })\n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'success': False, 'error': 'Lỗi khi nâng cấp. Vui lòng thử lại!'})\n\n@app.route('/mining')\n@login_required\ndef mining():\n    return render_template('mining.html')\n\n@app.route('/api/send-message', methods=['POST'])\n@login_required\ndef send_message():\n    # Validate JSON request\n    if not request.json:\n        return jsonify({'success': False, 'error': 'Dữ liệu JSON không hợp lệ!'})\n    \n    content = request.json.get('content')\n    channel = request.json.get('channel', 'general')\n    channel_id = request.json.get('channel_id')\n    \n    if not content or len(content) > 500:\n        return jsonify({'success': False, 'error': 'Nội dung tin nhắn không hợp lệ'})\n    \n    message = ChatMessage(\n        user_id=current_user.id,\n        content=content,\n        channel=channel,\n        channel_id=channel_id\n    )\n    \n    db.session.add(message)\n    db.session.commit()\n    \n    return jsonify({'success': True})\n\n@app.route('/api/join-expedition/<int:expedition_id>', methods=['POST'])\n@login_required\ndef join_expedition(expedition_id):\n    expedition = Expedition.query.get_or_404(expedition_id)\n    \n    # Check if already joined\n    existing = ExpeditionParticipant.query.filter_by(\n        expedition_id=expedition_id,\n        user_id=current_user.id\n    ).first()\n    \n    if existing:\n        return jsonify({'success': False, 'error': 'Bạn đã tham gia đạo lữ này rồi!'})\n    \n    # Check requirements\n    if len(expedition.participants) >= expedition.max_participants:\n        return jsonify({'success': False, 'error': 'Đạo lữ đã đủ thành viên!'})\n    \n    participant = ExpeditionParticipant(\n        expedition_id=expedition_id,\n        user_id=current_user.id\n    )\n    \n    db.session.add(participant)\n    db.session.commit()\n    \n    return jsonify({'success': True, 'message': 'Tham gia đạo lữ thành công!'})\n\n@app.route('/api/create-guild', methods=['POST'])\n@login_required\ndef create_guild():\n    if current_user.guild_id:\n        return jsonify({'success': False, 'error': 'Bạn đã có bang hội rồi!'})\n    \n    # Validate JSON request\n    if not request.json:\n        return jsonify({'success': False, 'error': 'Dữ liệu JSON không hợp lệ!'})\n    \n    name = request.json.get('name')\n    description = request.json.get('description', '')\n    \n    if not name or len(name) < 3:\n        return jsonify({'success': False, 'error': 'Tên bang hội phải có ít nhất 3 ký tự!'})\n    \n    if Guild.query.filter_by(name=name).first():\n        return jsonify({'success': False, 'error': 'Tên bang hội đã tồn tại!'})\n    \n    # Check cost\n    guild_cost = 10000  # spiritual stones\n    if current_user.spiritual_stones < guild_cost:\n        return jsonify({'success': False, 'error': f'Cần {guild_cost} linh thạch để tạo bang hội!'})\n    \n    guild = Guild(\n        name=name,\n        description=description,\n        leader_id=current_user.id\n    )\n    \n    current_user.spiritual_stones -= guild_cost\n    \n    try:\n        db.session.add(guild)\n        db.session.commit()\n        \n        # Update user's guild\n        current_user.guild_id = guild.id\n        db.session.commit()\n        \n        return jsonify({'success': True, 'message': 'Tạo bang hội thành công!'})\n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'success': False, 'error': 'Lỗi khi tạo bang hội. Vui lòng thử lại!'})\n\n@app.route('/api/create-expedition', methods=['POST'])\n@login_required\ndef create_expedition():\n    # Validate JSON request\n    if not request.json:\n        return jsonify({'success': False, 'error': 'Dữ liệu JSON không hợp lệ!'})\n    \n    data = request.json\n    \n    name = data.get('name')\n    destination = data.get('destination')\n    description = data.get('description', '')\n    \n    if not name or len(name) < 3:\n        return jsonify({'success': False, 'error': 'Tên đạo lữ phải có ít nhất 3 ký tự!'})\n    \n    if not destination:\n        return jsonify({'success': False, 'error': 'Điểm đến không được để trống!'})\n    \n    # Check cost\n    expedition_cost = 5000  # spiritual stones\n    if current_user.spiritual_stones < expedition_cost:\n        return jsonify({'success': False, 'error': f'Cần {expedition_cost} linh thạch để tạo đạo lữ!'})\n    \n    expedition = Expedition(\n        name=name,\n        destination=destination,\n        description=description,\n        difficulty_level=max(1, min(5, int(data.get('difficulty_level', 1)))),\n        max_participants=max(1, min(10, int(data.get('max_participants', 5)))),\n        duration_hours=max(1, min(168, int(data.get('duration_hours', 24)))),\n        min_cultivation=data.get('min_cultivation'),\n        required_items=data.get('required_items'),\n        potential_rewards=data.get('potential_rewards'),\n        organizer_guild_id=current_user.guild_id\n    )\n    \n    current_user.spiritual_stones -= expedition_cost\n    \n    try:\n        # Validate integer fields before database insert\n        if not isinstance(expedition.difficulty_level, int) or not isinstance(expedition.max_participants, int):\n            return jsonify({'success': False, 'error': 'Dữ liệu số không hợp lệ!'})\n            \n        db.session.add(expedition)\n        db.session.commit()\n        \n        return jsonify({'success': True, 'message': 'Tạo đạo lữ thành công!'})\n    except (ValueError, TypeError) as e:\n        db.session.rollback()\n        return jsonify({'success': False, 'error': 'Dữ liệu đầu vào không hợp lệ!'})\n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'success': False, 'error': 'Lỗi khi tạo đạo lữ. Vui lòng thử lại!'})\n\n@app.route('/api/get-messages', methods=['GET'])\n@login_required  \ndef get_messages():\n    channel = request.args.get('channel', 'general')\n    channel_id = request.args.get('channel_id')\n    \n    query = ChatMessage.query.filter_by(channel=channel)\n    if channel_id:\n        query = query.filter_by(channel_id=channel_id)\n    \n    messages = query.order_by(ChatMessage.created_at.desc()).limit(20).all()\n    \n    message_list = []\n    for msg in messages:\n        message_list.append({\n            'id': msg.id,\n            'content': msg.content,\n            'user_id': msg.user_id,\n            'user_name': msg.user.dao_name or msg.user.username,\n            'created_at': msg.created_at.isoformat()\n        })\n    \n    return jsonify({'success': True, 'messages': message_list})\n\n\n","size_bytes":25258},"static/css/style.css":{"content":"/* Custom CSS Variables */\n:root {\n    --golden: #ffd700;\n    --purple: #8e2de2;\n    --celestial: #4facfe;\n    --dark-bg: #0f0f23;\n    --darker-bg: #1a1a2e;\n    --card-bg: rgba(26, 26, 46, 0.9);\n    --text-light: #e0e6ed;\n}\n\n/* Global Styles */\n* {\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    background: var(--dark-bg);\n    color: var(--text-light);\n    margin: 0;\n    padding: 0;\n    line-height: 1.6;\n}\n\n/* Mystical Background */\n.mystical-body {\n    background: linear-gradient(135deg, var(--dark-bg), var(--darker-bg));\n    position: relative;\n    min-height: 100vh;\n}\n\n.mystical-bg {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: -10;\n    background: \n        radial-gradient(circle at 20% 50%, rgba(255, 215, 0, 0.1) 0%, transparent 50%),\n        radial-gradient(circle at 80% 20%, rgba(142, 45, 226, 0.1) 0%, transparent 50%),\n        radial-gradient(circle at 40% 80%, rgba(79, 172, 254, 0.1) 0%, transparent 50%);\n}\n\n.floating-particles {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n}\n\n.floating-particles::before,\n.floating-particles::after {\n    content: '';\n    position: absolute;\n    width: 4px;\n    height: 4px;\n    background: var(--golden);\n    border-radius: 50%;\n    animation: float 20s infinite linear;\n    opacity: 0.6;\n}\n\n.floating-particles::before {\n    left: 10%;\n    animation-delay: 0s;\n}\n\n.floating-particles::after {\n    left: 80%;\n    animation-delay: -10s;\n}\n\n@keyframes float {\n    0% { transform: translateY(100vh) rotate(0deg); opacity: 0; }\n    10% { opacity: 1; }\n    90% { opacity: 1; }\n    100% { transform: translateY(-10vh) rotate(360deg); opacity: 0; }\n}\n\n/* Navigation */\n.mystical-navbar {\n    background: rgba(15, 15, 35, 0.95);\n    backdrop-filter: blur(10px);\n    border-bottom: 1px solid rgba(255, 215, 0, 0.2);\n    box-shadow: 0 2px 20px rgba(0, 0, 0, 0.5);\n}\n\n.navbar-brand .brand-text {\n    font-size: 1.5rem;\n    font-weight: bold;\n    background: linear-gradient(135deg, var(--golden), var(--celestial));\n    background-clip: text;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n}\n\n.navbar-nav .nav-link {\n    color: var(--text-light) !important;\n    transition: all 0.3s ease;\n    position: relative;\n}\n\n.navbar-nav .nav-link:hover {\n    color: var(--golden) !important;\n    transform: translateY(-2px);\n}\n\n.navbar-nav .nav-link::after {\n    content: '';\n    position: absolute;\n    width: 0;\n    height: 2px;\n    bottom: 0;\n    left: 50%;\n    background: var(--golden);\n    transition: all 0.3s ease;\n}\n\n.navbar-nav .nav-link:hover::after {\n    width: 100%;\n    left: 0;\n}\n\n/* Dropdown */\n.mystical-dropdown {\n    background: var(--card-bg);\n    border: 1px solid rgba(255, 215, 0, 0.3);\n    backdrop-filter: blur(10px);\n}\n\n.mystical-dropdown .dropdown-item {\n    color: var(--text-light);\n    transition: all 0.3s ease;\n}\n\n.mystical-dropdown .dropdown-item:hover {\n    background: rgba(255, 215, 0, 0.1);\n    color: var(--golden);\n}\n\n/* Main Content */\n.main-content {\n    padding-top: 80px;\n    min-height: 100vh;\n}\n\n/* Cards */\n.mystical-card {\n    background: var(--card-bg);\n    border: 1px solid rgba(255, 215, 0, 0.2);\n    border-radius: 15px;\n    backdrop-filter: blur(10px);\n    box-shadow: \n        0 8px 32px rgba(0, 0, 0, 0.3),\n        inset 0 1px 0 rgba(255, 255, 255, 0.1);\n    transition: all 0.3s ease;\n    overflow: hidden;\n    position: relative;\n}\n\n.mystical-card::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 1px;\n    background: linear-gradient(90deg, transparent, var(--golden), transparent);\n    opacity: 0;\n    transition: opacity 0.3s ease;\n}\n\n.mystical-card:hover {\n    transform: translateY(-5px);\n    box-shadow: \n        0 20px 40px rgba(0, 0, 0, 0.4),\n        0 0 20px rgba(255, 215, 0, 0.1);\n}\n\n.mystical-card:hover::before {\n    opacity: 1;\n}\n\n.mystical-card .card-header {\n    background: rgba(142, 45, 226, 0.2);\n    border-bottom: 1px solid rgba(255, 215, 0, 0.2);\n    padding: 1rem 1.5rem;\n}\n\n.mystical-card .card-body {\n    padding: 1.5rem;\n}\n\n/* Buttons */\n.mystical-btn {\n    border: none;\n    border-radius: 25px;\n    padding: 0.75rem 1.5rem;\n    font-weight: 600;\n    text-transform: uppercase;\n    letter-spacing: 1px;\n    transition: all 0.3s ease;\n    position: relative;\n    overflow: hidden;\n}\n\n.mystical-btn::before {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 0;\n    height: 0;\n    background: rgba(255, 255, 255, 0.2);\n    border-radius: 50%;\n    transition: all 0.6s ease;\n    transform: translate(-50%, -50%);\n}\n\n.mystical-btn:hover::before {\n    width: 300px;\n    height: 300px;\n}\n\n.btn-golden {\n    background: linear-gradient(135deg, var(--golden), #ffed4e);\n    color: var(--darker-bg);\n    box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);\n}\n\n.btn-golden:hover {\n    background: linear-gradient(135deg, #ffed4e, var(--golden));\n    color: var(--darker-bg);\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(255, 215, 0, 0.4);\n}\n\n.btn-purple {\n    background: linear-gradient(135deg, var(--purple), #4facfe);\n    color: white;\n    box-shadow: 0 4px 15px rgba(142, 45, 226, 0.3);\n}\n\n.btn-purple:hover {\n    background: linear-gradient(135deg, #4facfe, var(--purple));\n    color: white;\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(142, 45, 226, 0.4);\n}\n\n.btn-celestial {\n    background: linear-gradient(135deg, var(--celestial), #00f2fe);\n    color: white;\n    box-shadow: 0 4px 15px rgba(79, 172, 254, 0.3);\n}\n\n.btn-celestial:hover {\n    background: linear-gradient(135deg, #00f2fe, var(--celestial));\n    color: white;\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(79, 172, 254, 0.4);\n}\n\n.btn-outline-golden {\n    border: 2px solid var(--golden);\n    color: var(--golden);\n    background: transparent;\n}\n\n.btn-outline-golden:hover {\n    background: var(--golden);\n    color: var(--darker-bg);\n}\n\n.btn-outline-celestial {\n    border: 2px solid var(--celestial);\n    color: var(--celestial);\n    background: transparent;\n}\n\n.btn-outline-celestial:hover {\n    background: var(--celestial);\n    color: white;\n}\n\n/* Forms */\n.mystical-form .form-label {\n    font-weight: 600;\n    margin-bottom: 0.5rem;\n}\n\n.mystical-input {\n    background: rgba(26, 26, 46, 0.8);\n    border: 2px solid rgba(255, 215, 0, 0.3);\n    border-radius: 10px;\n    color: var(--text-light);\n    padding: 0.75rem 1rem;\n    transition: all 0.3s ease;\n}\n\n.mystical-input:focus {\n    background: rgba(26, 26, 46, 0.9);\n    border-color: var(--golden);\n    box-shadow: 0 0 0 0.2rem rgba(255, 215, 0, 0.25);\n    color: var(--text-light);\n}\n\n.mystical-input::placeholder {\n    color: rgba(224, 230, 237, 0.5);\n}\n\n/* Text Colors */\n.text-golden { color: var(--golden) !important; }\n.text-purple { color: var(--purple) !important; }\n.text-celestial { color: var(--celestial) !important; }\n\n/* Hero Section */\n.hero-section {\n    background: linear-gradient(135deg, rgba(15, 15, 35, 0.9), rgba(26, 26, 46, 0.9));\n    position: relative;\n    overflow: hidden;\n}\n\n.hero-section::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1000 1000\"><defs><pattern id=\"stars\" width=\"100\" height=\"100\" patternUnits=\"userSpaceOnUse\"><circle cx=\"20\" cy=\"20\" r=\"1\" fill=\"%23ffd700\" opacity=\"0.5\"><animate attributeName=\"opacity\" values=\"0.5;1;0.5\" dur=\"3s\" repeatCount=\"indefinite\"/></circle><circle cx=\"80\" cy=\"60\" r=\"0.5\" fill=\"%234facfe\" opacity=\"0.3\"><animate attributeName=\"opacity\" values=\"0.3;0.8;0.3\" dur=\"4s\" repeatCount=\"indefinite\"/></circle><circle cx=\"50\" cy=\"90\" r=\"0.8\" fill=\"%238e2de2\" opacity=\"0.4\"><animate attributeName=\"opacity\" values=\"0.4;0.9;0.4\" dur=\"5s\" repeatCount=\"indefinite\"/></circle></pattern></defs><rect width=\"100%\" height=\"100%\" fill=\"url(%23stars)\"/></svg>') repeat;\n    opacity: 0.3;\n    z-index: -1;\n}\n\n.hero-title {\n    font-size: 3.5rem;\n    font-weight: bold;\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);\n    animation: glow 3s ease-in-out infinite alternate;\n}\n\n@keyframes glow {\n    from { text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5), 0 0 10px rgba(255, 215, 0, 0.3); }\n    to { text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5), 0 0 20px rgba(255, 215, 0, 0.6), 0 0 30px rgba(255, 215, 0, 0.4); }\n}\n\n.hero-subtitle {\n    font-size: 1.2rem;\n    color: rgba(224, 230, 237, 0.8);\n    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);\n}\n\n.mystical-image {\n    border-radius: 15px;\n    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);\n    transition: all 0.3s ease;\n}\n\n.mystical-image:hover {\n    transform: scale(1.05);\n    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.4);\n}\n\n/* Stats Section */\n.stats-section {\n    background: rgba(26, 26, 46, 0.5);\n}\n\n.stat-card {\n    text-align: center;\n    padding: 2rem 1rem;\n    transition: all 0.3s ease;\n}\n\n.mini-stat-box {\n    background: rgba(26, 26, 46, 0.6);\n    border: 1px solid rgba(255, 215, 0, 0.2);\n    border-radius: 8px;\n    padding: 0.75rem;\n    text-align: center;\n    transition: all 0.3s ease;\n}\n\n.mini-stat-box:hover {\n    border-color: rgba(255, 215, 0, 0.4);\n    box-shadow: 0 2px 8px rgba(255, 215, 0, 0.1);\n}\n\n.stat-icon {\n    font-size: 3rem;\n    margin-bottom: 1rem;\n}\n\n.stat-number {\n    font-size: 2.5rem;\n    font-weight: bold;\n    margin-bottom: 0.5rem;\n}\n\n.stat-label {\n    font-size: 1rem;\n    color: rgba(224, 230, 237, 0.7);\n    text-transform: uppercase;\n    letter-spacing: 1px;\n}\n\n/* Features Section */\n.features-section {\n    padding: 5rem 0;\n}\n\n.section-title {\n    font-size: 2.5rem;\n    font-weight: bold;\n    margin-bottom: 1rem;\n}\n\n.section-subtitle {\n    font-size: 1.1rem;\n    color: rgba(224, 230, 237, 0.7);\n    margin-bottom: 3rem;\n}\n\n.feature-card {\n    padding: 2rem;\n    text-align: center;\n    height: 100%;\n    transition: all 0.3s ease;\n}\n\n.feature-card:hover {\n    transform: translateY(-10px);\n}\n\n.feature-icon {\n    font-size: 3rem;\n    margin-bottom: 1.5rem;\n}\n\n.feature-card h4 {\n    margin-bottom: 1rem;\n    font-weight: 600;\n}\n\n.feature-card p {\n    color: rgba(224, 230, 237, 0.8);\n    line-height: 1.6;\n}\n\n/* Gallery */\n.gallery-item {\n    position: relative;\n    overflow: hidden;\n    border-radius: 15px;\n    height: 250px;\n}\n\n.gallery-img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n    transition: all 0.3s ease;\n}\n\n.gallery-overlay {\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    background: linear-gradient(transparent, rgba(15, 15, 35, 0.8));\n    padding: 2rem 1rem 1rem;\n    transform: translateY(100%);\n    transition: all 0.3s ease;\n}\n\n.gallery-item:hover .gallery-img {\n    transform: scale(1.1);\n}\n\n.gallery-item:hover .gallery-overlay {\n    transform: translateY(0);\n}\n\n/* Achievements */\n.achievement-card {\n    padding: 1.5rem;\n    border-left: 4px solid;\n    position: relative;\n}\n\n.achievement-card.rarity-common { border-left-color: #6c757d; }\n.achievement-card.rarity-rare { border-left-color: var(--celestial); }\n.achievement-card.rarity-legendary { border-left-color: var(--golden); }\n\n.achievement-rarity {\n    position: absolute;\n    top: 0.5rem;\n    right: 1rem;\n    padding: 0.25rem 0.5rem;\n    border-radius: 12px;\n    font-size: 0.75rem;\n    text-transform: uppercase;\n    font-weight: 600;\n}\n\n.rarity-common { background: rgba(108, 117, 125, 0.2); color: #6c757d; }\n.rarity-rare { background: rgba(79, 172, 254, 0.2); color: var(--celestial); }\n.rarity-legendary { background: rgba(255, 215, 0, 0.2); color: var(--golden); }\n\n/* Dashboard Specific */\n.cultivation-progress {\n    position: relative;\n}\n\n.mystical-progress {\n    height: 10px;\n    background: rgba(26, 26, 46, 0.8);\n    border-radius: 5px;\n    overflow: hidden;\n}\n\n.progress-bar-golden {\n    background: linear-gradient(90deg, var(--golden), #ffed4e);\n    position: relative;\n}\n\n.progress-bar-golden::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);\n    animation: shine 2s infinite;\n}\n\n@keyframes shine {\n    0% { left: -100%; }\n    100% { left: 100%; }\n}\n\n.resources-grid {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 1rem;\n    margin-bottom: 1rem;\n}\n\n.resource-item {\n    text-align: center;\n    padding: 1rem;\n    background: rgba(142, 45, 226, 0.1);\n    border-radius: 10px;\n    transition: all 0.3s ease;\n}\n\n.resource-item:hover {\n    background: rgba(142, 45, 226, 0.2);\n    transform: translateY(-2px);\n}\n\n.resource-item i {\n    font-size: 1.5rem;\n    margin-bottom: 0.5rem;\n}\n\n.resource-item span {\n    display: block;\n    font-size: 1.2rem;\n    font-weight: bold;\n    color: var(--text-light);\n    margin-bottom: 0.25rem;\n}\n\n.resource-item small {\n    color: rgba(224, 230, 237, 0.7);\n    font-size: 0.8rem;\n}\n\n/* Activity List */\n.activity-list {\n    max-height: 300px;\n    overflow-y: auto;\n}\n\n.activity-item {\n    padding: 0.75rem 0;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.activity-item:last-child {\n    border-bottom: none;\n}\n\n.activity-user {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 0.25rem;\n}\n\n.activity-content {\n    font-size: 0.9rem;\n    opacity: 0.8;\n}\n\n/* Expedition Cards */\n.expedition-card {\n    background: rgba(79, 172, 254, 0.1);\n    padding: 1rem;\n    border-radius: 10px;\n    border-left: 4px solid var(--celestial);\n    transition: all 0.3s ease;\n}\n\n.expedition-card:hover {\n    background: rgba(79, 172, 254, 0.15);\n    transform: translateY(-2px);\n}\n\n.expedition-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 0.5rem;\n}\n\n.difficulty-badge {\n    padding: 0.25rem 0.5rem;\n    border-radius: 12px;\n    font-size: 0.75rem;\n    font-weight: 600;\n    text-transform: uppercase;\n}\n\n.difficulty-1 { background: rgba(40, 167, 69, 0.2); color: #28a745; }\n.difficulty-2 { background: rgba(255, 193, 7, 0.2); color: #ffc107; }\n.difficulty-3 { background: rgba(255, 136, 0, 0.2); color: #ff8800; }\n.difficulty-4 { background: rgba(220, 53, 69, 0.2); color: #dc3545; }\n.difficulty-5 { background: rgba(142, 45, 226, 0.2); color: var(--purple); }\n\n.expedition-info {\n    margin-top: 0.5rem;\n}\n\n/* Footer */\n.mystical-footer {\n    background: var(--darker-bg);\n    border-top: 1px solid rgba(255, 215, 0, 0.2);\n    padding: 3rem 0 2rem;\n    margin-top: auto;\n}\n\n.social-links a {\n    font-size: 1.5rem;\n    transition: all 0.3s ease;\n}\n\n.social-links a:hover {\n    transform: translateY(-2px) scale(1.1);\n    text-shadow: 0 0 10px currentColor;\n}\n\n/* Modals */\n.mystical-modal .modal-content {\n    background: var(--card-bg);\n    border: 1px solid rgba(255, 215, 0, 0.3);\n    backdrop-filter: blur(10px);\n}\n\n.mystical-modal .modal-header {\n    border-bottom: 1px solid rgba(255, 215, 0, 0.2);\n}\n\n.mystical-modal .modal-footer {\n    border-top: 1px solid rgba(255, 215, 0, 0.2);\n}\n\n/* Alerts */\n.mystical-alert {\n    background: var(--card-bg);\n    border: 1px solid;\n    color: var(--text-light);\n    backdrop-filter: blur(10px);\n}\n\n.alert-success { border-color: rgba(40, 167, 69, 0.5); }\n.alert-danger { border-color: rgba(220, 53, 69, 0.5); }\n.alert-info { border-color: rgba(23, 162, 184, 0.5); }\n\n/* Mobile Specific Improvements */\n@media (max-width: 576px) {\n    .mobile-header {\n        height: 65px;\n        padding: 0 1rem;\n    }\n    \n    .mobile-header .navbar-brand .brand-text {\n        font-size: 1.1rem;\n    }\n    \n    .mystical-sidebar {\n        width: 100%;\n        max-width: 320px;\n    }\n    \n    .sidebar-nav .nav-link {\n        padding: 1.2rem 1.5rem;\n        margin: 0 0.75rem;\n        font-size: 1.05rem;\n        min-height: 56px;\n    }\n    \n    .nav-section .nav-link {\n        padding: 1rem 1rem;\n        margin: 0 1rem 0 1.75rem;\n        min-height: 48px;\n    }\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .hero-title {\n        font-size: 2.5rem;\n    }\n    \n    .hero-subtitle {\n        font-size: 1rem;\n    }\n    \n    .resources-grid {\n        grid-template-columns: 1fr;\n    }\n    \n    .stat-number {\n        font-size: 2rem;\n    }\n    \n    .feature-icon {\n        font-size: 2.5rem;\n    }\n    \n    /* Improved mobile menu spacing */\n    .main-content.with-sidebar {\n        padding: 1rem;\n    }\n}\n\n/* Tablet optimizations */\n@media (min-width: 769px) and (max-width: 991.98px) {\n    .mystical-sidebar {\n        width: 260px;\n    }\n    \n    .sidebar-nav .nav-link {\n        padding: 0.9rem 1.25rem;\n        font-size: 0.92rem;\n    }\n    \n    .section-title {\n        font-size: 0.75rem;\n        padding: 0.6rem 1.25rem 0.4rem 1.25rem;\n    }\n}\n\n/* Scrollbar Styling */\n::-webkit-scrollbar {\n    width: 8px;\n}\n\n::-webkit-scrollbar-track {\n    background: var(--darker-bg);\n}\n\n::-webkit-scrollbar-thumb {\n    background: linear-gradient(135deg, var(--golden), var(--purple));\n    border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n    background: linear-gradient(135deg, var(--purple), var(--celestial));\n}\n\n/* Loading Animation */\n.loading-spinner {\n    display: inline-block;\n    width: 20px;\n    height: 20px;\n    border: 2px solid rgba(255, 215, 0, 0.3);\n    border-radius: 50%;\n    border-top-color: var(--golden);\n    animation: spin 1s ease-in-out infinite;\n}\n\n@keyframes spin {\n    to { transform: rotate(360deg); }\n}\n\n/* Custom Animations */\n.fade-in {\n    animation: fadeIn 0.5s ease-in-out;\n}\n\n@keyframes fadeIn {\n    from { opacity: 0; transform: translateY(20px); }\n    to { opacity: 1; transform: translateY(0); }\n}\n\n.slide-in-left {\n    animation: slideInLeft 0.5s ease-in-out;\n}\n\n@keyframes slideInLeft {\n    from { opacity: 0; transform: translateX(-30px); }\n    to { opacity: 1; transform: translateX(0); }\n}\n\n.slide-in-right {\n    animation: slideInRight 0.5s ease-in-out;\n}\n\n@keyframes slideInRight {\n    from { opacity: 0; transform: translateX(30px); }\n    to { opacity: 1; transform: translateX(0); }\n}\n\n/* ========================= */\n/* VERTICAL SIDEBAR STYLES  */\n/* ========================= */\n\n/* Mobile Header */\n.mobile-header {\n    background: rgba(15, 15, 35, 0.98);\n    backdrop-filter: blur(15px);\n    border-bottom: 1px solid rgba(255, 215, 0, 0.3);\n    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.6);\n    z-index: 1050;\n    height: 70px;\n    display: flex;\n    align-items: center;\n}\n\n.mobile-header .navbar-brand {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    text-decoration: none;\n}\n\n.mobile-header .navbar-brand .brand-text {\n    font-size: 1.3rem;\n    font-weight: bold;\n    background: linear-gradient(135deg, var(--golden), var(--celestial));\n    background-clip: text;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    margin-left: 0.5rem;\n}\n\n.mobile-header .btn-outline-golden {\n    border: 2px solid var(--golden);\n    color: var(--golden);\n    background: transparent;\n    padding: 0.5rem 1rem;\n    border-radius: 8px;\n    transition: all 0.3s ease;\n    min-width: 48px;\n    height: 44px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.mobile-header .btn-outline-golden:hover {\n    background: var(--golden);\n    color: var(--dark-bg);\n    transform: scale(1.05);\n}\n\n/* Mystical Sidebar */\n.mystical-sidebar {\n    width: 300px;\n    background: linear-gradient(180deg, rgba(15, 15, 35, 0.98), rgba(26, 26, 46, 0.98));\n    backdrop-filter: blur(15px);\n    border-right: 1px solid rgba(255, 215, 0, 0.3);\n    box-shadow: 6px 0 30px rgba(0, 0, 0, 0.4);\n    position: fixed;\n    top: 0;\n    left: 0;\n    height: 100vh;\n    z-index: 1055;\n    overflow-y: auto;\n    overflow-x: hidden;\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    scrollbar-width: thin;\n}\n\n.mystical-sidebar::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 2px;\n    height: 100%;\n    background: linear-gradient(180deg, transparent, var(--golden), var(--purple), var(--celestial), transparent);\n    opacity: 0.6;\n    animation: sidebarGlow 4s ease-in-out infinite alternate;\n}\n\n@keyframes sidebarGlow {\n    0% { opacity: 0.3; }\n    100% { opacity: 0.8; }\n}\n\n/* Sidebar Header */\n.sidebar-header {\n    padding: 1.5rem;\n    border-bottom: 1px solid rgba(255, 215, 0, 0.1);\n    position: relative;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.sidebar-brand {\n    display: flex;\n    align-items: center;\n    text-decoration: none;\n    color: var(--text-light);\n    transition: all 0.3s ease;\n}\n\n.sidebar-brand:hover {\n    color: var(--golden);\n    transform: scale(1.05);\n}\n\n.sidebar-brand i {\n    font-size: 2rem;\n    color: var(--golden);\n    margin-right: 1rem;\n    text-shadow: 0 0 15px rgba(255, 215, 0, 0.5);\n    animation: dragonPulse 3s ease-in-out infinite alternate;\n}\n\n@keyframes dragonPulse {\n    0% { text-shadow: 0 0 15px rgba(255, 215, 0, 0.5); }\n    100% { text-shadow: 0 0 25px rgba(255, 215, 0, 0.8), 0 0 35px rgba(255, 215, 0, 0.4); }\n}\n\n.brand-content {\n    display: flex;\n    flex-direction: column;\n}\n\n.brand-title {\n    font-size: 1.5rem;\n    font-weight: bold;\n    background: linear-gradient(135deg, var(--golden), var(--celestial));\n    background-clip: text;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    line-height: 1.2;\n}\n\n.brand-subtitle {\n    font-size: 0.85rem;\n    color: rgba(224, 230, 237, 0.7);\n    line-height: 1.2;\n}\n\n/* Sidebar Navigation */\n.sidebar-nav {\n    padding: 1rem 0 2rem 0;\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n}\n\n.sidebar-nav .nav {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.sidebar-nav .nav-item {\n    margin: 0.2rem 0;\n}\n\n.sidebar-nav .nav-link {\n    color: var(--text-light);\n    padding: 1rem 1.5rem;\n    margin: 0 1rem;\n    border-radius: 12px;\n    transition: all 0.3s ease;\n    position: relative;\n    overflow: hidden;\n    text-decoration: none;\n    display: flex;\n    align-items: center;\n    font-size: 0.95rem;\n    font-weight: 500;\n    min-height: 48px;\n    user-select: none;\n}\n\n.sidebar-nav .nav-link i {\n    width: 20px;\n    font-size: 1.1rem;\n    margin-right: 1rem;\n    transition: all 0.3s ease;\n}\n\n.sidebar-nav .nav-link .nav-text {\n    flex: 1;\n    transition: all 0.3s ease;\n}\n\n.sidebar-nav .nav-link::before {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 0;\n    height: 100%;\n    background: linear-gradient(135deg, rgba(255, 215, 0, 0.1), rgba(142, 45, 226, 0.1));\n    transition: width 0.3s ease;\n    z-index: -1;\n}\n\n.sidebar-nav .nav-link:hover {\n    color: var(--golden);\n    background: rgba(255, 215, 0, 0.05);\n    transform: translateX(5px);\n    box-shadow: 0 4px 15px rgba(255, 215, 0, 0.1);\n}\n\n.sidebar-nav .nav-link:hover::before {\n    width: 100%;\n}\n\n.sidebar-nav .nav-link.active {\n    color: var(--golden);\n    background: rgba(255, 215, 0, 0.1);\n    box-shadow: 0 4px 15px rgba(255, 215, 0, 0.2);\n}\n\n.sidebar-nav .nav-link i {\n    font-size: 1.1rem;\n    width: 24px;\n    margin-right: 0.75rem;\n    text-align: center;\n    flex-shrink: 0;\n}\n\n.nav-text {\n    font-weight: 500;\n    flex: 1;\n}\n\n/* Navigation Sections */\n.nav-section {\n    margin: 1.5rem 0;\n}\n\n.section-title {\n    display: flex;\n    align-items: center;\n    padding: 0.75rem 1.5rem 0.5rem 1.5rem;\n    margin: 0 1rem;\n    font-size: 0.8rem;\n    font-weight: 600;\n    color: rgba(224, 230, 237, 0.7);\n    text-transform: uppercase;\n    letter-spacing: 1.2px;\n    border-bottom: 1px solid rgba(255, 215, 0, 0.1);\n    position: relative;\n}\n\n.section-title i {\n    margin-right: 0.5rem;\n    font-size: 0.9rem;\n    color: var(--golden);\n    opacity: 0.8;\n}\n\n.section-title::after {\n    content: '';\n    position: absolute;\n    bottom: -1px;\n    left: 0;\n    width: 40%;\n    height: 1px;\n    background: linear-gradient(90deg, var(--golden), transparent);\n    animation: sectionGlow 3s ease-in-out infinite alternate;\n}\n\n@keyframes sectionGlow {\n    0% { width: 25%; opacity: 0.4; }\n    100% { width: 55%; opacity: 0.8; }\n}\n\n/* Subsection navigation */\n.nav-section .nav {\n    margin-top: 0.5rem;\n}\n\n.nav-section .nav-link {\n    padding: 0.75rem 1rem;\n    margin: 0 1rem 0 1.5rem;\n    font-size: 0.9rem;\n    position: relative;\n    min-height: 44px;\n    border-radius: 10px;\n}\n\n.nav-section .nav-link::before {\n    content: '';\n    position: absolute;\n    left: -0.75rem;\n    top: 50%;\n    width: 8px;\n    height: 1px;\n    background: rgba(255, 215, 0, 0.4);\n    transform: translateY(-50%);\n    transition: all 0.3s ease;\n}\n\n.nav-section .nav-link:hover::before {\n    width: 16px;\n    background: var(--golden);\n    box-shadow: 0 0 8px rgba(255, 215, 0, 0.3);\n}\n\n/* User section at bottom */\n.nav-section.mt-auto {\n    margin-top: auto !important;\n    padding-top: 1rem;\n    border-top: 1px solid rgba(255, 215, 0, 0.1);\n}\n\n/* Main Content with Sidebar */\n.main-content.with-sidebar {\n    margin-left: 300px;\n    padding-top: 2rem;\n    transition: margin-left 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    min-height: 100vh;\n}\n\n/* Responsive Design for Sidebar */\n@media (max-width: 991.98px) {\n    .mystical-sidebar {\n        transform: translateX(-100%);\n        width: 280px;\n    }\n    \n    .mystical-sidebar.show {\n        transform: translateX(0);\n        box-shadow: 6px 0 30px rgba(0, 0, 0, 0.6);\n    }\n    \n    .main-content.with-sidebar {\n        margin-left: 0;\n        padding-top: 90px;\n    }\n    \n    .mobile-header {\n        display: flex !important;\n    }\n    \n    /* Mobile-specific nav styles */\n    .sidebar-nav .nav-link {\n        padding: 1rem 1.5rem;\n        margin: 0 0.5rem;\n        font-size: 1rem;\n        min-height: 52px;\n    }\n    \n    .sidebar-nav .nav-link i {\n        width: 24px;\n        font-size: 1.2rem;\n        margin-right: 1rem;\n    }\n    \n    /* Section titles on mobile */\n    .nav-section .section-title {\n        font-size: 0.85rem;\n        padding: 0.75rem 1rem;\n    }\n}\n\n@media (min-width: 992px) {\n    .mobile-header {\n        display: none !important;\n    }\n    \n    .mystical-sidebar {\n        position: fixed;\n        transform: translateX(0);\n    }\n}\n\n/* Touch devices optimization */\n@media (hover: none) and (pointer: coarse) {\n    .sidebar-nav .nav-link {\n        min-height: 54px;\n        padding: 1.1rem 1.5rem;\n    }\n    \n    .sidebar-nav .nav-link:active {\n        background: rgba(255, 215, 0, 0.15);\n        transform: scale(0.98);\n    }\n    \n    .mobile-header .btn-outline-golden {\n        min-width: 52px;\n        height: 48px;\n    }\n}\n\n/* Sidebar Close Button */\n.mystical-sidebar .btn-close {\n    background: none;\n    border: none;\n    color: var(--text-light);\n    font-size: 1.5rem;\n    opacity: 0.8;\n    transition: all 0.3s ease;\n}\n\n.mystical-sidebar .btn-close:hover {\n    opacity: 1;\n    color: var(--golden);\n    transform: scale(1.1);\n}\n\n/* Sidebar Scrollbar */\n.mystical-sidebar::-webkit-scrollbar {\n    width: 6px;\n}\n\n.mystical-sidebar::-webkit-scrollbar-track {\n    background: rgba(26, 26, 46, 0.5);\n}\n\n.mystical-sidebar::-webkit-scrollbar-thumb {\n    background: linear-gradient(180deg, var(--golden), var(--purple));\n    border-radius: 3px;\n}\n\n.mystical-sidebar::-webkit-scrollbar-thumb:hover {\n    background: linear-gradient(180deg, var(--purple), var(--celestial));\n}\n\n/* Backdrop overlay for mobile */\n.offcanvas-backdrop {\n    background: rgba(15, 15, 35, 0.85);\n    backdrop-filter: blur(5px);\n    z-index: 1040;\n}\n\n/* Smooth transitions and performance */\n.mystical-sidebar,\n.main-content.with-sidebar,\n.mobile-header {\n    will-change: transform;\n}\n\n/* Focus styles for accessibility */\n.sidebar-nav .nav-link:focus,\n.mobile-header .btn-outline-golden:focus {\n    outline: 2px solid var(--golden);\n    outline-offset: 2px;\n}\n\n/* Active menu item indicator */\n.sidebar-nav .nav-link.active::before {\n    width: 100%;\n    background: linear-gradient(135deg, var(--golden), var(--celestial));\n}\n\n/* Menu animation improvements */\n@media (prefers-reduced-motion: no-preference) {\n    .mystical-sidebar {\n        transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    }\n    \n    .sidebar-nav .nav-link {\n        transition: all 0.2s ease;\n    }\n}\n\n/* High contrast mode support */\n@media (prefers-contrast: high) {\n    .section-title {\n        border-bottom-color: var(--golden);\n    }\n    \n    .sidebar-nav .nav-link::before {\n        background: var(--golden);\n    }\n}\n","size_bytes":28443},"static/js/dashboard.js":{"content":"// Dashboard specific JavaScript functionality\nclass Dashboard {\n    constructor() {\n        this.cultivationTimer = null;\n        this.aiAdviceTimer = null;\n        this.resourceUpdateTimer = null;\n        this.init();\n    }\n\n    init() {\n        this.setupCultivationSystem();\n        this.setupAIInteractions();\n        this.setupResourceManagement();\n        this.setupGuildQuickActions();\n        this.startDashboardUpdates();\n    }\n\n    setupCultivationSystem() {\n        // Auto-cultivation toggle\n        const autoCultivateToggle = document.getElementById('autoCultivate');\n        if (autoCultivateToggle) {\n            autoCultivateToggle.addEventListener('change', (e) => {\n                if (e.target.checked) {\n                    this.startAutoCultivation();\n                } else {\n                    this.stopAutoCultivation();\n                }\n            });\n        }\n\n        // Cultivation progress animation\n        this.animateCultivationProgress();\n    }\n\n    async cultivate() {\n        const cultivateBtn = document.querySelector('[onclick=\"cultivate()\"]');\n        if (!cultivateBtn) return;\n\n        const originalText = cultivateBtn.innerHTML;\n        showLoading(cultivateBtn);\n\n        try {\n            const response = await fetch('/api/cultivate', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-Requested-With': 'XMLHttpRequest'\n                }\n            });\n\n            const data = await response.json();\n\n            if (data.success) {\n                // Update spiritual power display\n                this.updateSpiritualPower(data.new_total);\n                \n                // Show cultivation effect\n                this.showCultivationEffect(data.power_gained);\n                \n                // Update cultivation level if changed\n                if (data.cultivation_level) {\n                    this.updateCultivationLevel(data.cultivation_level);\n                }\n\n                // Show success notification\n                window.tuTienApp.showNotification(\n                    'Tu Luyện Thành Công!', \n                    `Tăng ${data.power_gained} điểm linh lực`, \n                    'cultivation'\n                );\n\n                // Check for breakthrough\n                this.checkBreakthrough(data);\n            } else {\n                throw new Error(data.error || 'Cultivation failed');\n            }\n        } catch (error) {\n            console.error('Cultivation error:', error);\n            window.tuTienApp.showNotification('Lỗi Tu Luyện', error.message, 'error');\n        } finally {\n            hideLoading(cultivateBtn, originalText);\n        }\n    }\n\n    updateSpiritualPower(newPower) {\n        const powerElement = document.querySelector('[data-spiritual-power]');\n        if (powerElement) {\n            window.tuTienApp.animateNumberChange(powerElement, newPower);\n        }\n\n        // Update progress bar\n        const progressBar = document.querySelector('.progress-bar-golden');\n        if (progressBar) {\n            const percentage = (newPower % 1000) / 10;\n            progressBar.style.width = `${percentage}%`;\n        }\n    }\n\n    updateCultivationLevel(newLevel) {\n        const levelElements = document.querySelectorAll('[data-cultivation-level]');\n        levelElements.forEach(element => {\n            element.textContent = newLevel;\n        });\n    }\n\n    showCultivationEffect(powerGained) {\n        // Create floating power gain effect\n        const effect = document.createElement('div');\n        effect.className = 'cultivation-effect';\n        effect.textContent = `+${powerGained}`;\n        effect.style.cssText = `\n            position: fixed;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            color: #ffd700;\n            font-size: 2rem;\n            font-weight: bold;\n            pointer-events: none;\n            z-index: 9999;\n            animation: cultivationGain 2s ease-out forwards;\n        `;\n\n        if (!document.getElementById('cultivation-effects-style')) {\n            const style = document.createElement('style');\n            style.id = 'cultivation-effects-style';\n            style.textContent = `\n                @keyframes cultivationGain {\n                    0% { opacity: 0; transform: translate(-50%, -50%) scale(0.5); }\n                    50% { opacity: 1; transform: translate(-50%, -50%) scale(1.2); }\n                    100% { opacity: 0; transform: translate(-50%, -100px) scale(0.8); }\n                }\n            `;\n            document.head.appendChild(style);\n        }\n\n        document.body.appendChild(effect);\n        setTimeout(() => effect.remove(), 2000);\n\n        // Add cultivation aura effect\n        this.addCultivationAura();\n    }\n\n    addCultivationAura() {\n        const avatar = document.querySelector('.avatar-container');\n        if (avatar) {\n            avatar.classList.add('cultivation-active');\n            setTimeout(() => {\n                avatar.classList.remove('cultivation-active');\n            }, 3000);\n        }\n    }\n\n    checkBreakthrough(data) {\n        if (data.breakthrough) {\n            // Major breakthrough effect\n            this.showBreakthroughEffect(data.new_stage);\n        }\n    }\n\n    showBreakthroughEffect(newStage) {\n        // Full screen breakthrough effect\n        const overlay = document.createElement('div');\n        overlay.className = 'breakthrough-overlay';\n        overlay.innerHTML = `\n            <div class=\"breakthrough-content\">\n                <h1 class=\"breakthrough-title\">突破成功!</h1>\n                <h2 class=\"breakthrough-stage\">${newStage}</h2>\n                <div class=\"breakthrough-particles\"></div>\n            </div>\n        `;\n        overlay.style.cssText = `\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: radial-gradient(circle, rgba(255, 215, 0, 0.3), rgba(0, 0, 0, 0.8));\n            z-index: 10000;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            animation: breakthroughFade 4s ease-out forwards;\n        `;\n\n        document.body.appendChild(overlay);\n\n        // Auto remove after animation\n        setTimeout(() => overlay.remove(), 4000);\n\n        // Play breakthrough sound if available\n        this.playBreakthroughSound();\n    }\n\n    playBreakthroughSound() {\n        // Create audio context for breakthrough sound\n        if (typeof AudioContext !== 'undefined' || typeof webkitAudioContext !== 'undefined') {\n            const audioContext = new (AudioContext || webkitAudioContext)();\n            const oscillator = audioContext.createOscillator();\n            const gainNode = audioContext.createGain();\n\n            oscillator.connect(gainNode);\n            gainNode.connect(audioContext.destination);\n\n            oscillator.frequency.setValueAtTime(440, audioContext.currentTime);\n            oscillator.frequency.exponentialRampToValueAtTime(880, audioContext.currentTime + 0.5);\n            \n            gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);\n            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 1);\n\n            oscillator.start(audioContext.currentTime);\n            oscillator.stop(audioContext.currentTime + 1);\n        }\n    }\n\n    startAutoCultivation() {\n        this.cultivationTimer = setInterval(() => {\n            this.cultivate();\n        }, 60000); // Auto cultivate every minute\n\n        window.tuTienApp.showNotification('Tự Động Tu Luyện', 'Đã bật chế độ tự động tu luyện', 'info');\n    }\n\n    stopAutoCultivation() {\n        if (this.cultivationTimer) {\n            clearInterval(this.cultivationTimer);\n            this.cultivationTimer = null;\n        }\n        window.tuTienApp.showNotification('Tự Động Tu Luyện', 'Đã tắt chế độ tự động tu luyện', 'info');\n    }\n\n    animateCultivationProgress() {\n        const progressBar = document.querySelector('.progress-bar-golden');\n        if (progressBar) {\n            // Add breathing animation to progress bar\n            setInterval(() => {\n                progressBar.style.filter = 'brightness(1.2)';\n                setTimeout(() => {\n                    progressBar.style.filter = 'brightness(1)';\n                }, 1000);\n            }, 2000);\n        }\n    }\n\n    setupAIInteractions() {\n        // AI fortune refresh\n        const refreshFortuneBtn = document.getElementById('refreshFortune');\n        if (refreshFortuneBtn) {\n            refreshFortuneBtn.addEventListener('click', () => {\n                this.refreshAIFortune();\n            });\n        }\n\n        // AI advice interaction\n        this.setupAIAdviceInteraction();\n    }\n\n    async refreshAIFortune() {\n        const fortuneContainer = document.querySelector('.fortune-text');\n        if (!fortuneContainer) return;\n\n        // Show loading\n        const originalFortune = fortuneContainer.innerHTML;\n        fortuneContainer.innerHTML = '<div class=\"loading-spinner\"></div><p class=\"text-light mt-2\">AI đang tính toán vận mệnh...</p>';\n\n        try {\n            // Simulate AI fortune generation\n            await new Promise(resolve => setTimeout(resolve, 2000));\n            \n            const fortunes = [\n                \"Hôm nay là ngày tốt lành cho việc đột phá cảnh giới cao hơn!\",\n                \"Nên tránh tu luyện công pháp mạnh trong 3 ngày tới để tránh tẩu hỏa nhập ma.\",\n                \"Có cơ hội gặp được cao nhân chỉ điểm đạo pháp trong tuần này.\",\n                \"Thiên kiếp sắp tới, hãy chuẩn bị tâm lý và tài nguyên cẩn thận.\",\n                \"Vận mệnh thuận lợi cho việc luyện đan dược và chế tạo pháp bảo.\",\n                \"Thích hợp khám phá bí cảnh để tìm kiếm cơ duyên và báu vật.\",\n                \"Nên tập trung vào tu luyện thần thức và tâm pháp.\",\n                \"Có thể gặp phải tiểu nhân, cần cảnh giác trong giao dịch.\"\n            ];\n\n            const newFortune = fortunes[Math.floor(Math.random() * fortunes.length)];\n            fortuneContainer.innerHTML = `\n                <i class=\"fas fa-quote-left text-golden opacity-50\"></i>\n                <p class=\"text-light mt-2\">${newFortune}</p>\n                <i class=\"fas fa-quote-right text-golden opacity-50 float-end\"></i>\n            `;\n\n            window.tuTienApp.showNotification('AI Dự Đoán', 'Đã cập nhật vận mệnh mới!', 'info');\n        } catch (error) {\n            fortuneContainer.innerHTML = originalFortune;\n            window.tuTienApp.showNotification('Lỗi', 'Không thể cập nhật vận mệnh!', 'error');\n        }\n    }\n\n    setupAIAdviceInteraction() {\n        // Create AI chat interface\n        const aiChatBtn = document.getElementById('aiChatBtn');\n        if (aiChatBtn) {\n            aiChatBtn.addEventListener('click', () => {\n                this.openAIChat();\n            });\n        }\n    }\n\n    openAIChat() {\n        // Create AI chat modal\n        const modal = document.createElement('div');\n        modal.className = 'modal fade';\n        modal.innerHTML = `\n            <div class=\"modal-dialog modal-lg\">\n                <div class=\"modal-content mystical-modal\">\n                    <div class=\"modal-header border-bottom border-secondary\">\n                        <h5 class=\"modal-title text-golden\">\n                            <i class=\"fas fa-robot me-2\"></i>AI Tu Tiên Cố Vấn\n                        </h5>\n                        <button type=\"button\" class=\"btn-close btn-close-white\" data-bs-dismiss=\"modal\"></button>\n                    </div>\n                    <div class=\"modal-body\">\n                        <div class=\"ai-chat-container\" style=\"height: 400px; overflow-y: auto; padding: 1rem; background: rgba(15, 15, 35, 0.3); border-radius: 10px;\">\n                            <div class=\"ai-message\">\n                                <strong class=\"text-golden\">AI Cố Vấn:</strong>\n                                <p class=\"text-light\">Xin chào, ta là AI cố vấn tu tiên. Hãy hỏi ta về bất kỳ điều gì liên quan đến tu luyện!</p>\n                            </div>\n                        </div>\n                        <div class=\"ai-chat-input mt-3\">\n                            <div class=\"input-group\">\n                                <input type=\"text\" class=\"form-control mystical-input\" id=\"aiChatInput\" placeholder=\"Hỏi AI về tu luyện...\">\n                                <button class=\"btn btn-golden mystical-btn\" onclick=\"dashboard.sendAIMessage()\">\n                                    <i class=\"fas fa-paper-plane\"></i>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        document.body.appendChild(modal);\n        const bootstrapModal = new bootstrap.Modal(modal);\n        bootstrapModal.show();\n\n        // Clean up on close\n        modal.addEventListener('hidden.bs.modal', () => {\n            modal.remove();\n        });\n    }\n\n    async sendAIMessage() {\n        const input = document.getElementById('aiChatInput');\n        const container = document.querySelector('.ai-chat-container');\n        \n        if (!input || !container || !input.value.trim()) return;\n\n        const message = input.value.trim();\n        input.value = '';\n\n        // Add user message\n        const userMessage = document.createElement('div');\n        userMessage.className = 'user-message mb-3';\n        userMessage.innerHTML = `\n            <strong class=\"text-celestial\">Bạn:</strong>\n            <p class=\"text-light\">${message}</p>\n        `;\n        container.appendChild(userMessage);\n\n        // Add AI thinking indicator\n        const thinkingMessage = document.createElement('div');\n        thinkingMessage.className = 'ai-thinking mb-3';\n        thinkingMessage.innerHTML = `\n            <strong class=\"text-golden\">AI Cố Vấn:</strong>\n            <p class=\"text-light\"><i class=\"fas fa-circle-notch fa-spin me-2\"></i>Đang suy nghĩ...</p>\n        `;\n        container.appendChild(thinkingMessage);\n        container.scrollTop = container.scrollHeight;\n\n        try {\n            // Simulate AI response\n            await new Promise(resolve => setTimeout(resolve, 1500));\n            \n            const responses = this.generateAIResponse(message);\n            thinkingMessage.remove();\n\n            const aiMessage = document.createElement('div');\n            aiMessage.className = 'ai-message mb-3';\n            aiMessage.innerHTML = `\n                <strong class=\"text-golden\">AI Cố Vấn:</strong>\n                <p class=\"text-light\">${responses}</p>\n            `;\n            container.appendChild(aiMessage);\n            container.scrollTop = container.scrollHeight;\n\n        } catch (error) {\n            thinkingMessage.remove();\n            const errorMessage = document.createElement('div');\n            errorMessage.className = 'ai-message mb-3';\n            errorMessage.innerHTML = `\n                <strong class=\"text-golden\">AI Cố Vấn:</strong>\n                <p class=\"text-danger\">Xin lỗi, ta đang gặp vấn đề. Hãy thử lại sau.</p>\n            `;\n            container.appendChild(errorMessage);\n        }\n    }\n\n    generateAIResponse(message) {\n        const keywords = message.toLowerCase();\n        \n        if (keywords.includes('tu luyện') || keywords.includes('cultivation')) {\n            return \"Để tu luyện hiệu quả, nên duy trì thói quen tu luyện hàng ngày, sử dụng đan dược hỗ trợ và tìm kiếm môi trường có linh khí dồi dào. Nhớ không được vội vàng đột phá khi chưa đủ cơ sở.\";\n        } else if (keywords.includes('đột phá') || keywords.includes('breakthrough')) {\n            return \"Đột phá cảnh giới cần chuẩn bị kỹ lưỡng: tích lũy đủ linh lực, có đan dược hỗ trợ, chọn thời điểm thích hợp và tâm trạng ổn định. Không nên ép buộc đột phá khi chưa sẵn sàng.\";\n        } else if (keywords.includes('bang hội') || keywords.includes('guild')) {\n            return \"Tham gia bang hội mạnh sẽ có nhiều lợi ích: chia sẻ tài nguyên, học hỏi kinh nghiệm, tham gia đạo lữ nhóm và được bảo vệ. Hãy chọn bang hội phù hợp với phong cách tu luyện của bạn.\";\n        } else if (keywords.includes('đạo lữ') || keywords.includes('expedition')) {\n            return \"Đạo lữ là cách tốt để thu thập tài nguyên và tăng kinh nghiệm. Chuẩn bị đầy đủ vật phẩm, tìm hiểu về điểm đến và hợp tác tốt với đồng đội để đảm bảo an toàn.\";\n        } else if (keywords.includes('pháp bảo') || keywords.includes('tài nguyên')) {\n            return \"Quản lý tài nguyên thông minh: ưu tiên nâng cấp pháp bảo chính, đầu tư vào đan dược chất lượng, và luôn dự trữ một phần cho trường hợp khẩn cấp.\";\n        } else {\n            return \"Ta hiểu bạn quan tâm đến con đường tu tiên. Hãy hỏi cụ thể hơn về tu luyện, đột phá, bang hội, đạo lữ hoặc quản lý tài nguyên để ta có thể tư vấn tốt hơn.\";\n        }\n    }\n\n    setupResourceManagement() {\n        // Resource auto-collection\n        this.startResourceUpdates();\n        \n        // Quick resource actions\n        this.setupQuickResourceActions();\n    }\n\n    startResourceUpdates() {\n        this.resourceUpdateTimer = setInterval(() => {\n            this.updateResources();\n        }, 60000); // Update every minute\n    }\n\n    updateResources() {\n        // Simulate resource generation\n        const spiritualStones = document.querySelector('[data-spiritual-stones]');\n        const pills = document.querySelector('[data-pills]');\n        \n        if (spiritualStones) {\n            const current = parseInt(spiritualStones.textContent) || 0;\n            const gained = Math.floor(Math.random() * 10) + 5;\n            window.tuTienApp.animateNumberChange(spiritualStones, current + gained);\n        }\n\n        if (Math.random() < 0.1 && pills) { // 10% chance to gain pills\n            const current = parseInt(pills.textContent) || 0;\n            window.tuTienApp.animateNumberChange(pills, current + 1);\n            window.tuTienApp.showNotification('Tài Nguyên', 'Tìm thấy đan dược!', 'success');\n        }\n    }\n\n    setupQuickResourceActions() {\n        // Quick use pills button\n        const quickUsePillBtn = document.getElementById('quickUsePill');\n        if (quickUsePillBtn) {\n            quickUsePillBtn.addEventListener('click', () => {\n                this.quickUsePill();\n            });\n        }\n\n        // Resource exchange\n        const exchangeBtn = document.getElementById('resourceExchange');\n        if (exchangeBtn) {\n            exchangeBtn.addEventListener('click', () => {\n                this.openResourceExchange();\n            });\n        }\n    }\n\n    quickUsePill() {\n        const pillsCount = document.querySelector('[data-pills]');\n        const currentPills = parseInt(pillsCount?.textContent) || 0;\n        \n        if (currentPills > 0) {\n            // Use pill and gain spiritual power\n            window.tuTienApp.animateNumberChange(pillsCount, currentPills - 1);\n            \n            const powerGain = Math.floor(Math.random() * 100) + 50;\n            const currentPower = parseInt(document.querySelector('[data-spiritual-power]')?.textContent?.replace(/[^\\d]/g, '')) || 0;\n            this.updateSpiritualPower(currentPower + powerGain);\n            \n            window.tuTienApp.showNotification('Sử Dụng Đan Dược', `Tăng ${powerGain} linh lực!`, 'success');\n        } else {\n            window.tuTienApp.showNotification('Không Đủ Đan Dược', 'Cần có ít nhất 1 đan dược để sử dụng!', 'warning');\n        }\n    }\n\n    openResourceExchange() {\n        // Resource exchange interface would be implemented here\n        window.tuTienApp.showNotification('Sàn Giao Dịch', 'Tính năng sàn giao dịch sẽ được phát triển!', 'info');\n    }\n\n    setupGuildQuickActions() {\n        // Quick guild war declaration\n        const quickWarBtn = document.getElementById('quickWar');\n        if (quickWarBtn) {\n            quickWarBtn.addEventListener('click', () => {\n                this.openQuickWarInterface();\n            });\n        }\n\n        // Guild contribution\n        const contributeBtn = document.getElementById('guildContribute');\n        if (contributeBtn) {\n            contributeBtn.addEventListener('click', () => {\n                this.openGuildContribution();\n            });\n        }\n    }\n\n    openQuickWarInterface() {\n        // Quick war declaration interface\n        window.tuTienApp.showNotification('Tuyên Chiến Nhanh', 'Tính năng tuyên chiến nhanh sẽ được phát triển!', 'info');\n    }\n\n    openGuildContribution() {\n        // Guild contribution interface\n        window.tuTienApp.showNotification('Đóng Góp Bang Hội', 'Tính năng đóng góp bang hội sẽ được phát triển!', 'info');\n    }\n\n    startDashboardUpdates() {\n        // Real-time dashboard updates\n        setInterval(() => {\n            this.updateDashboardStats();\n        }, 30000); // Update every 30 seconds\n    }\n\n    updateDashboardStats() {\n        // Update various dashboard statistics\n        this.updateOnlineCount();\n        this.updateGuildActivity();\n        this.updateExpeditionStatus();\n    }\n\n    updateOnlineCount() {\n        const onlineCountEl = document.querySelector('[data-online-count]');\n        if (onlineCountEl) {\n            const count = Math.floor(Math.random() * 50) + 20;\n            onlineCountEl.textContent = count;\n        }\n    }\n\n    updateGuildActivity() {\n        // Update guild activity indicators\n        const guildActivityEl = document.querySelector('[data-guild-activity]');\n        if (guildActivityEl) {\n            const activities = ['Đang tu luyện', 'Tham gia đạo lữ', 'Giao dịch', 'Offline'];\n            const activity = activities[Math.floor(Math.random() * activities.length)];\n            guildActivityEl.textContent = activity;\n        }\n    }\n\n    updateExpeditionStatus() {\n        // Update expedition status\n        const expeditionStatusEl = document.querySelector('[data-expedition-status]');\n        if (expeditionStatusEl) {\n            const statuses = ['Sẵn sàng tham gia', 'Đang trong đạo lữ', 'Chờ phần thưởng'];\n            const status = statuses[Math.floor(Math.random() * statuses.length)];\n            expeditionStatusEl.textContent = status;\n        }\n    }\n\n    // Cleanup when leaving dashboard\n    destroy() {\n        if (this.cultivationTimer) {\n            clearInterval(this.cultivationTimer);\n        }\n        if (this.aiAdviceTimer) {\n            clearInterval(this.aiAdviceTimer);\n        }\n        if (this.resourceUpdateTimer) {\n            clearInterval(this.resourceUpdateTimer);\n        }\n    }\n}\n\n// Global functions for dashboard\nasync function cultivate() {\n    if (window.dashboard) {\n        await window.dashboard.cultivate();\n    }\n}\n\nasync function createGuild() {\n    const form = document.getElementById('createGuildForm');\n    if (!form) return;\n\n    const formData = new FormData(form);\n    const guildData = {\n        name: formData.get('name'),\n        description: formData.get('description')\n    };\n\n    try {\n        const response = await fetch('/api/create-guild', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Requested-With': 'XMLHttpRequest'\n            },\n            body: JSON.stringify(guildData)\n        });\n\n        const data = await response.json();\n\n        if (data.success) {\n            window.tuTienApp.showNotification('Thành Công', data.message, 'success');\n            setTimeout(() => {\n                location.reload();\n            }, 1500);\n        } else {\n            window.tuTienApp.showNotification('Lỗi', data.error, 'error');\n        }\n    } catch (error) {\n        window.tuTienApp.showNotification('Lỗi', 'Không thể tạo bang hội!', 'error');\n    }\n}\n\n// Initialize dashboard on page load\ndocument.addEventListener('DOMContentLoaded', () => {\n    if (document.body.classList.contains('dashboard-page') || window.location.pathname.includes('dashboard')) {\n        window.dashboard = new Dashboard();\n        console.log('Dashboard initialized successfully!');\n    }\n});\n","size_bytes":24959},"static/js/expeditions.js":{"content":"// Global expedition functions\nfunction openCreateExpeditionModal() {\n    const modal = document.getElementById('createExpeditionModal');\n    if (modal) {\n        modal.style.display = 'block';\n        modal.classList.add('show');\n        modal.style.backgroundColor = 'rgba(15, 15, 35, 0.8)';\n        document.body.style.overflow = 'hidden';\n        \n        // Reset form\n        const form = document.getElementById('createExpeditionForm');\n        if (form) form.reset();\n        \n        // Add click outside to close\n        modal.addEventListener('click', function(e) {\n            if (e.target === modal) {\n                closeCreateExpeditionModal();\n            }\n        });\n    }\n}\n\nfunction closeCreateExpeditionModal() {\n    const modal = document.getElementById('createExpeditionModal');\n    if (modal) {\n        modal.style.display = 'none';\n        modal.classList.remove('show');\n        document.body.style.overflow = '';\n        \n        // Remove any lingering backdrops\n        const backdrops = document.querySelectorAll('.modal-backdrop');\n        backdrops.forEach(backdrop => backdrop.remove());\n        document.body.classList.remove('modal-open');\n        document.body.style.paddingRight = '';\n    }\n}\n\nasync function joinExpedition(expeditionId) {\n    if (!confirm('Bạn có chắc muốn tham gia đạo lữ này?')) return;\n    \n    try {\n        const response = await fetch('/api/join-expedition', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ expedition_id: expeditionId })\n        });\n        \n        const data = await response.json();\n        \n        if (data.success) {\n            alert('Đã tham gia đạo lữ thành công!');\n            location.reload();\n        } else {\n            alert('Lỗi: ' + (data.error || 'Không thể tham gia'));\n        }\n    } catch (error) {\n        console.error('Error:', error);\n        alert('Có lỗi xảy ra!');\n    }\n}\n\n// Expeditions JavaScript functionality\nclass ExpeditionManager {\n    constructor() {\n        this.activeExpeditions = [];\n        this.availableExpeditions = [];\n        this.expeditionTimer = null;\n        this.routeGenerator = null;\n        this.init();\n    }\n\n    init() {\n        this.setupExpeditionActions();\n        this.setupAIRouteGenerator();\n        this.setupExpeditionTracking();\n        this.setupResourceManagement();\n        this.startExpeditionUpdates();\n    }\n\n    setupExpeditionActions() {\n        // Expedition creation form\n        const createExpeditionForm = document.getElementById('createExpeditionForm');\n        if (createExpeditionForm) {\n            createExpeditionForm.addEventListener('submit', (e) => {\n                e.preventDefault();\n                this.handleExpeditionCreation();\n            });\n        }\n\n        // Join expedition buttons\n        document.addEventListener('click', (e) => {\n            if (e.target.matches('[onclick*=\"joinExpedition\"]')) {\n                e.preventDefault();\n                const expeditionId = this.extractExpeditionId(e.target.getAttribute('onclick'));\n                this.handleJoinExpedition(expeditionId);\n            }\n        });\n\n        // Quick expedition search\n        const expeditionSearch = document.getElementById('expeditionSearch');\n        if (expeditionSearch) {\n            expeditionSearch.addEventListener('input', (e) => {\n                this.filterExpeditions(e.target.value);\n            });\n        }\n    }\n\n    async handleExpeditionCreation() {\n        const form = document.getElementById('createExpeditionForm');\n        if (!form) {\n            console.error('Expedition creation form not found');\n            return;\n        }\n\n        const formData = new FormData(form);\n        \n        const expeditionData = {\n            name: formData.get('name'),\n            destination: formData.get('destination'),\n            description: formData.get('description'),\n            difficulty_level: parseInt(formData.get('difficulty_level')),\n            max_participants: parseInt(formData.get('max_participants')),\n            duration_hours: parseInt(formData.get('duration_hours')),\n            min_cultivation: formData.get('min_cultivation'),\n            required_items: formData.get('required_items'),\n            potential_rewards: formData.get('potential_rewards')\n        };\n\n        const submitBtn = form.querySelector('button[type=\"submit\"]');\n        const originalText = submitBtn ? submitBtn.innerHTML : '';\n        if (submitBtn) {\n            showLoading(submitBtn);\n        }\n\n        try {\n            const response = await fetch('/api/create-expedition', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-Requested-With': 'XMLHttpRequest'\n                },\n                body: JSON.stringify(expeditionData)\n            });\n\n            const data = await response.json();\n\n            if (data.success) {\n                this.showExpeditionCreationEffect();\n                window.tuTienApp.showNotification(\n                    'Đạo Lữ Thành Lập!', \n                    `Đã tạo đạo lữ \"${expeditionData.name}\" thành công`, \n                    'success'\n                );\n                \n                // Close modal and refresh\n                const modal = bootstrap.Modal.getInstance(document.getElementById('createExpeditionModal'));\n                modal.hide();\n                \n                setTimeout(() => {\n                    location.reload();\n                }, 1500);\n            } else {\n                throw new Error(data.error || 'Không thể tạo đạo lữ');\n            }\n        } catch (error) {\n            console.error('Expedition creation error:', error);\n            window.tuTienApp.showNotification('Lỗi Tạo Đạo Lữ', error.message, 'error');\n        } finally {\n            if (submitBtn) {\n                hideLoading(submitBtn, originalText);\n            }\n        }\n    }\n\n    showExpeditionCreationEffect() {\n        // Create expedition creation effect\n        const effect = document.createElement('div');\n        effect.className = 'expedition-creation-effect';\n        effect.innerHTML = `\n            <div class=\"expedition-effect-content\">\n                <h1 class=\"expedition-title\">🗺️ ĐẠO LỮ KHAI KHỞI! 🗺️</h1>\n                <div class=\"expedition-sparkles\"></div>\n            </div>\n        `;\n        effect.style.cssText = `\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: radial-gradient(circle, rgba(79, 172, 254, 0.3), rgba(0, 0, 0, 0.8));\n            z-index: 10000;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            animation: expeditionFade 2.5s ease-out forwards;\n        `;\n\n        if (!document.getElementById('expedition-effects-style')) {\n            const style = document.createElement('style');\n            style.id = 'expedition-effects-style';\n            style.textContent = `\n                @keyframes expeditionFade {\n                    0% { opacity: 0; }\n                    20% { opacity: 1; }\n                    80% { opacity: 1; }\n                    100% { opacity: 0; }\n                }\n                .expedition-title {\n                    color: #4facfe;\n                    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);\n                    font-size: 2.5rem;\n                    animation: glow 1s ease-in-out infinite alternate;\n                }\n            `;\n            document.head.appendChild(style);\n        }\n\n        document.body.appendChild(effect);\n        setTimeout(() => effect.remove(), 2500);\n    }\n\n    extractExpeditionId(onclickAttr) {\n        const match = onclickAttr.match(/joinExpedition\\((\\d+)\\)/);\n        return match ? parseInt(match[1]) : null;\n    }\n\n    async handleJoinExpedition(expeditionId) {\n        if (!expeditionId) return;\n\n        try {\n            const response = await fetch(`/api/join-expedition/${expeditionId}`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-Requested-With': 'XMLHttpRequest'\n                }\n            });\n\n            const data = await response.json();\n\n            if (data.success) {\n                this.showJoinExpeditionEffect();\n                window.tuTienApp.showNotification(\n                    'Tham Gia Đạo Lữ!', \n                    data.message, \n                    'success'\n                );\n                \n                // Update UI\n                this.updateExpeditionParticipants(expeditionId);\n            } else {\n                throw new Error(data.error || 'Không thể tham gia đạo lữ');\n            }\n        } catch (error) {\n            console.error('Join expedition error:', error);\n            window.tuTienApp.showNotification('Lỗi Tham Gia', error.message, 'error');\n        }\n    }\n\n    showJoinExpeditionEffect() {\n        // Create join expedition effect with particles\n        for (let i = 0; i < 10; i++) {\n            const particle = document.createElement('div');\n            particle.className = 'expedition-particle';\n            particle.style.cssText = `\n                position: fixed;\n                width: 6px;\n                height: 6px;\n                background: #4facfe;\n                border-radius: 50%;\n                pointer-events: none;\n                z-index: 9998;\n                left: ${Math.random() * window.innerWidth}px;\n                top: ${Math.random() * window.innerHeight}px;\n                animation: expeditionParticle 2s ease-out forwards;\n            `;\n\n            document.body.appendChild(particle);\n            setTimeout(() => particle.remove(), 2000);\n        }\n\n        if (!document.getElementById('expedition-particle-style')) {\n            const style = document.createElement('style');\n            style.id = 'expedition-particle-style';\n            style.textContent = `\n                @keyframes expeditionParticle {\n                    0% { \n                        opacity: 1; \n                        transform: scale(1) translateY(0); \n                    }\n                    100% { \n                        opacity: 0; \n                        transform: scale(0.5) translateY(-100px); \n                    }\n                }\n            `;\n            document.head.appendChild(style);\n        }\n    }\n\n    updateExpeditionParticipants(expeditionId) {\n        // Update the participants display for the expedition\n        const expeditionCard = document.querySelector(`[data-expedition-id=\"${expeditionId}\"]`);\n        if (expeditionCard) {\n            const participantsCount = expeditionCard.querySelector('.participants-badge');\n            if (participantsCount) {\n                const current = participantsCount.textContent.match(/(\\d+)\\/(\\d+)/);\n                if (current) {\n                    const newCount = parseInt(current[1]) + 1;\n                    const max = current[2];\n                    participantsCount.innerHTML = `<i class=\"fas fa-users me-1\"></i>${newCount}/${max}`;\n                }\n            }\n        }\n    }\n\n    filterExpeditions(searchTerm) {\n        const expeditionCards = document.querySelectorAll('.expedition-card');\n        searchTerm = searchTerm.toLowerCase();\n\n        expeditionCards.forEach(card => {\n            const title = card.querySelector('h5, h6').textContent.toLowerCase();\n            const description = card.querySelector('p').textContent.toLowerCase();\n            const destination = card.querySelector('[data-destination]')?.textContent.toLowerCase() || '';\n\n            if (title.includes(searchTerm) || description.includes(searchTerm) || destination.includes(searchTerm)) {\n                card.style.display = 'block';\n            } else {\n                card.style.display = 'none';\n            }\n        });\n    }\n\n    setupAIRouteGenerator() {\n        // AI route generation button\n        const generateRouteBtn = document.getElementById('generateRouteBtn');\n        if (generateRouteBtn) {\n            generateRouteBtn.addEventListener('click', () => {\n                this.generateAIRoute();\n            });\n        }\n\n        // Route difficulty selector\n        const difficultySlider = document.querySelector('input[name=\"difficulty_level\"]');\n        if (difficultySlider) {\n            difficultySlider.addEventListener('input', (e) => {\n                this.updateRouteSuggestions(parseInt(e.target.value));\n            });\n        }\n    }\n\n    async generateAIRoute() {\n        const difficultyInput = document.querySelector('input[name=\"difficulty_level\"]')?.value || 3;\n        const difficultyLevel = Math.max(1, Math.min(5, parseInt(difficultyInput) || 3));\n        const destination = document.querySelector('select[name=\"destination\"]')?.value || 'Rừng Tre Xanh';\n        \n        const routeContainer = document.getElementById('generated-route');\n        const routeInfo = routeContainer.querySelector('.route-info');\n        \n        if (!routeContainer || !routeInfo) {\n            console.warn('Route container elements not found');\n            return;\n        }\n        \n        routeContainer.style.display = 'block';\n        routeInfo.innerHTML = '<div class=\"loading-spinner\"></div><p class=\"text-light mt-2\">AI đang tạo lộ trình...</p>';\n\n        try {\n            // Simulate AI route generation\n            await new Promise(resolve => setTimeout(resolve, 2000));\n\n            const route = this.generateRouteData(difficultyLevel, destination);\n            \n            routeInfo.innerHTML = `\n                <h6 class=\"text-golden mb-3\">\n                    <i class=\"fas fa-route me-2\"></i>Lộ Trình AI Tạo\n                </h6>\n                \n                <div class=\"route-waypoints mb-3\">\n                    <h6 class=\"text-celestial\">Các Điểm Dừng:</h6>\n                    <div class=\"waypoint-list\">\n                        ${route.waypoints.map(waypoint => `\n                            <span class=\"route-waypoint\">${waypoint}</span>\n                        `).join('')}\n                    </div>\n                </div>\n                \n                <div class=\"route-details mb-3\">\n                    <div class=\"row\">\n                        <div class=\"col-6\">\n                            <small class=\"text-light\">Thời Gian Dự Kiến:</small>\n                            <div class=\"text-celestial\">${route.estimated_time}</div>\n                        </div>\n                        <div class=\"col-6\">\n                            <small class=\"text-light\">Độ Nguy Hiểm:</small>\n                            <div class=\"text-purple\">Cấp ${difficultyLevel}</div>\n                        </div>\n                    </div>\n                </div>\n                \n                <div class=\"route-supplies mb-3\">\n                    <h6 class=\"text-celestial\">Vật Phẩm Khuyến Nghị:</h6>\n                    <div class=\"supply-list\">\n                        ${route.recommended_supplies.map(supply => `\n                            <span class=\"supply-item\">${supply}</span>\n                        `).join('')}\n                    </div>\n                </div>\n                \n                <div class=\"route-events\">\n                    <h6 class=\"text-golden\">Sự Kiện Đặc Biệt:</h6>\n                    <ul class=\"list-unstyled\">\n                        ${route.special_events.map(event => `\n                            <li class=\"text-light\">\n                                <i class=\"fas fa-star text-warning me-2\"></i>\n                                ${event}\n                            </li>\n                        `).join('')}\n                    </ul>\n                </div>\n                \n                <div class=\"route-actions mt-3\">\n                    <button class=\"btn btn-sm btn-purple mystical-btn me-2\" onclick=\"expeditionManager.applyGeneratedRoute()\">\n                        <i class=\"fas fa-check me-1\"></i>Áp Dụng Lộ Trình\n                    </button>\n                    <button class=\"btn btn-sm btn-outline-celestial mystical-btn\" onclick=\"expeditionManager.generateAIRoute()\">\n                        <i class=\"fas fa-sync me-1\"></i>Tạo Lại\n                    </button>\n                </div>\n            `;\n\n            // Add styles if not exists\n            if (!document.getElementById('route-styles')) {\n                const style = document.createElement('style');\n                style.id = 'route-styles';\n                style.textContent = `\n                    .route-waypoint {\n                        background: rgba(79, 172, 254, 0.2);\n                        color: var(--celestial);\n                        padding: 0.25rem 0.5rem;\n                        border-radius: 8px;\n                        margin: 0.25rem;\n                        display: inline-block;\n                        font-size: 0.85rem;\n                    }\n                    .supply-item {\n                        background: rgba(142, 45, 226, 0.2);\n                        color: var(--purple);\n                        padding: 0.25rem 0.5rem;\n                        border-radius: 8px;\n                        margin: 0.25rem;\n                        display: inline-block;\n                        font-size: 0.85rem;\n                    }\n                    .waypoint-list, .supply-list {\n                        display: flex;\n                        flex-wrap: wrap;\n                        gap: 0.25rem;\n                    }\n                `;\n                document.head.appendChild(style);\n            }\n\n            window.tuTienApp.showNotification('AI Lộ Trình', 'Đã tạo lộ trình thông minh!', 'success');\n\n        } catch (error) {\n            routeInfo.innerHTML = '<p class=\"text-danger\">Không thể tạo lộ trình. Vui lòng thử lại.</p>';\n            window.tuTienApp.showNotification('Lỗi AI', 'Không thể tạo lộ trình!', 'error');\n        }\n    }\n\n    generateRouteData(difficulty, destination) {\n        const routes = {\n            1: {\n                waypoints: [\"Làng Khởi Đầu\", \"Rừng Tre Xanh\", \"Suối Linh Tuyền\", \"Đồi Hoa Lan\"],\n                supplies: [\"Đan dược cơ bản\", \"Nước uống\", \"Bùa may mắn\"],\n                events: [\"Gặp thú cưng hiền lành\", \"Tìm thấy linh thảo phổ biến\"]\n            },\n            2: {\n                waypoints: [\"Trạm Dừng An Toàn\", \"Thung Lũng Sương Mù\", \"Hang Dơi Máu\", \"Đỉnh Núi Kiếm\"],\n                supplies: [\"Đan dược hồi phục\", \"Pháp bảo phòng thủ\", \"Bùa trừ tà\"],\n                events: [\"15% cơ hội gặp Linh Thú cấp 2\", \"Có thể tìm thấy khoáng chất quý\"]\n            },\n            3: {\n                waypoints: [\"Cửa Ải Nguy Hiểm\", \"Sa Mạc Cát Vàng\", \"Đền Cổ Bỏ Hoang\", \"Hồ Nước Độc\"],\n                supplies: [\"Đan dược cao cấp\", \"Pháp bảo tấn công\", \"Linh thạch dự phòng\"],\n                events: [\"25% cơ hội gặp Boss mini\", \"Khả năng tìm được Thiên Tài Địa Bảo\"]\n            },\n            4: {\n                waypoints: [\"Ranh Giới Tử Thần\", \"Rừng Quỷ Dữ\", \"Thành Phố Ma\", \"Cổng Địa Ngục\"],\n                supplies: [\"Đan dược quý hiếm\", \"Pháp bảo thần bí\", \"Bùa hộ mạng\"],\n                events: [\"40% cơ hội gặp Ác Quỷ mạnh\", \"Có thể gặp được cao nhân ẩn dật\"]\n            },\n            5: {\n                waypoints: [\"Cửa Thiên Giới\", \"Thiên Đình\", \"Cung Điện Rồng\", \"Vực Sâu Vô Đáy\"],\n                supplies: [\"Tiên đan\", \"Thần khí\", \"Hộ thân phù\"],\n                events: [\"50% cơ hội gặp Thần Long\", \"Cơ hội đột phá cảnh giới cao\"]\n            }\n        };\n\n        const routeData = routes[difficulty] || routes[3];\n        \n        return {\n            waypoints: routeData.waypoints,\n            estimated_time: `${difficulty * 6}-${difficulty * 8} giờ`,\n            recommended_supplies: routeData.supplies,\n            special_events: routeData.events\n        };\n    }\n\n    applyGeneratedRoute() {\n        // Apply the generated route to the form\n        const routeData = this.getGeneratedRouteData();\n        \n        // Update form fields\n        const suppliesField = document.querySelector('input[name=\"required_items\"]');\n        if (suppliesField && routeData.supplies) {\n            suppliesField.value = routeData.supplies.join(', ');\n        }\n\n        const rewardsField = document.querySelector('textarea[name=\"potential_rewards\"]');\n        if (rewardsField && routeData.events) {\n            rewardsField.value = routeData.events.join(', ');\n        }\n\n        window.tuTienApp.showNotification('Lộ Trình', 'Đã áp dụng lộ trình AI vào đạo lữ!', 'success');\n    }\n\n    getGeneratedRouteData() {\n        const routeInfo = document.querySelector('.route-info');\n        if (!routeInfo) return {};\n\n        const supplies = Array.from(routeInfo.querySelectorAll('.supply-item')).map(item => item.textContent);\n        const events = Array.from(routeInfo.querySelectorAll('.route-events li')).map(item => item.textContent.trim());\n\n        return { supplies, events };\n    }\n\n    updateRouteSuggestions(difficulty) {\n        const destinationSelect = document.querySelector('select[name=\"destination\"]');\n        if (!destinationSelect) return;\n\n        // Update destination options based on difficulty\n        const destinations = {\n            1: [\"Rừng Tre Xanh\", \"Suối Linh Tuyền\", \"Đồi Hoa Lan\"],\n            2: [\"Thung Lũng Sương Mù\", \"Hang Dơi Máu\", \"Đỉnh Núi Kiếm\"],\n            3: [\"Sa Mạc Cát Vàng\", \"Đền Cổ Bỏ Hoang\", \"Hồ Nước Độc\"],\n            4: [\"Rừng Quỷ Dữ\", \"Thành Phố Ma\", \"Cổng Địa Ngục\"],\n            5: [\"Thiên Đình\", \"Cung Điện Rồng\", \"Vực Sâu Vô Đáy\"]\n        };\n\n        const currentValue = destinationSelect.value;\n        const suggestedDestinations = destinations[difficulty] || destinations[3];\n        \n        // Update options\n        destinationSelect.innerHTML = suggestedDestinations.map(dest => \n            `<option value=\"${dest}\" ${dest === currentValue ? 'selected' : ''}>${dest}</option>`\n        ).join('');\n    }\n\n    setupExpeditionTracking() {\n        // Real-time expedition progress tracking\n        this.setupProgressTracking();\n        \n        // Expedition status updates\n        this.setupStatusUpdates();\n        \n        // Participant activity monitoring\n        this.setupParticipantTracking();\n    }\n\n    setupProgressTracking() {\n        const progressBars = document.querySelectorAll('.expedition-progress');\n        progressBars.forEach(bar => {\n            this.animateProgress(bar);\n        });\n    }\n\n    animateProgress(progressBar) {\n        let progress = 0;\n        const targetProgress = Math.random() * 80 + 10; // 10-90%\n        \n        const interval = setInterval(() => {\n            progress += Math.random() * 2;\n            if (progress >= targetProgress) {\n                progress = targetProgress;\n                clearInterval(interval);\n            }\n            \n            progressBar.style.width = `${progress}%`;\n            progressBar.textContent = `${Math.floor(progress)}%`;\n        }, 500);\n    }\n\n    setupStatusUpdates() {\n        // Simulate status updates for active expeditions\n        setInterval(() => {\n            this.updateExpeditionStatuses();\n        }, 30000); // Update every 30 seconds\n    }\n\n    updateExpeditionStatuses() {\n        const activeExpeditionItems = document.querySelectorAll('.active-expedition-item');\n        \n        activeExpeditionItems.forEach(item => {\n            if (Math.random() < 0.3) { // 30% chance of update\n                const statusIndicator = item.querySelector('.expedition-status');\n                if (statusIndicator) {\n                    this.flashStatusUpdate(statusIndicator);\n                }\n            }\n        });\n    }\n\n    flashStatusUpdate(element) {\n        element.style.backgroundColor = 'rgba(79, 172, 254, 0.3)';\n        element.style.transition = 'background-color 0.5s ease';\n        \n        setTimeout(() => {\n            element.style.backgroundColor = '';\n        }, 1000);\n    }\n\n    setupParticipantTracking() {\n        // Track participant activity\n        const participantItems = document.querySelectorAll('.participant-item');\n        participantItems.forEach(item => {\n            this.addParticipantIndicators(item);\n        });\n    }\n\n    addParticipantIndicators(participantItem) {\n        // Add activity indicator\n        const indicator = document.createElement('div');\n        indicator.className = 'participant-activity';\n        indicator.style.cssText = `\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            background: ${Math.random() > 0.5 ? '#28a745' : '#6c757d'};\n            display: inline-block;\n            margin-left: 0.5rem;\n        `;\n        \n        participantItem.appendChild(indicator);\n    }\n\n    setupResourceManagement() {\n        // Expedition cost calculator\n        this.setupCostCalculator();\n        \n        // Resource requirement checker\n        this.setupRequirementChecker();\n        \n        // Reward distribution system\n        this.setupRewardSystem();\n    }\n\n    setupCostCalculator() {\n        const difficultySlider = document.querySelector('input[name=\"difficulty_level\"]');\n        const durationInput = document.querySelector('input[name=\"duration_hours\"]');\n        const participantsInput = document.querySelector('input[name=\"max_participants\"]');\n        \n        if (difficultySlider || durationInput || participantsInput) {\n            [difficultySlider, durationInput, participantsInput].forEach(input => {\n                if (input) {\n                    input.addEventListener('input', () => {\n                        this.calculateExpeditionCost();\n                    });\n                }\n            });\n        }\n    }\n\n    calculateExpeditionCost() {\n        const difficulty = Math.max(1, Math.min(5, parseInt(document.querySelector('input[name=\"difficulty_level\"]')?.value) || 1));\n        const duration = Math.max(1, Math.min(168, parseInt(document.querySelector('input[name=\"duration_hours\"]')?.value) || 24));\n        const participants = Math.max(1, Math.min(10, parseInt(document.querySelector('input[name=\"max_participants\"]')?.value) || 5));\n        \n        // Validate numbers to prevent NaN calculations\n        if (isNaN(difficulty) || isNaN(duration) || isNaN(participants)) {\n            console.warn('Invalid input values for expedition cost calculation');\n            return;\n        }\n        \n        const baseCost = difficulty * 1000;\n        const durationMultiplier = Math.ceil(duration / 24);\n        const participantBonus = participants * 500;\n        \n        const totalCost = baseCost * durationMultiplier + participantBonus;\n        \n        // Display cost if there's a cost display element\n        const costDisplay = document.getElementById('expeditionCost');\n        if (costDisplay) {\n            costDisplay.textContent = `${totalCost.toLocaleString()} Linh Thạch`;\n        }\n    }\n\n    setupRequirementChecker() {\n        // Check if user meets expedition requirements\n        document.addEventListener('click', (e) => {\n            if (e.target.matches('.join-expedition-btn')) {\n                const expeditionCard = e.target.closest('.expedition-card');\n                this.checkRequirements(expeditionCard);\n            }\n        });\n    }\n\n    checkRequirements(expeditionCard) {\n        const minCultivation = expeditionCard.querySelector('[data-min-cultivation]')?.textContent;\n        const requiredItems = expeditionCard.querySelector('[data-required-items]')?.textContent;\n        \n        // This would check against user's actual stats\n        // For now, just show a notification\n        if (minCultivation) {\n            window.tuTienApp.showNotification(\n                'Yêu Cầu Đạo Lữ', \n                `Cần cảnh giới tối thiểu: ${minCultivation}`, \n                'info'\n            );\n        }\n    }\n\n    setupRewardSystem() {\n        // Handle expedition completion rewards\n        this.setupRewardDistribution();\n        \n        // Achievement tracking for expeditions\n        this.setupAchievementTracking();\n    }\n\n    setupRewardDistribution() {\n        // Simulate reward distribution for completed expeditions\n        const completedExpeditions = document.querySelectorAll('.expedition-completed');\n        completedExpeditions.forEach(expedition => {\n            this.processRewards(expedition);\n        });\n    }\n\n    processRewards(expeditionElement) {\n        // Calculate and distribute rewards based on contribution\n        const contributionPoints = expeditionElement.querySelector('[data-contribution]')?.textContent || '0';\n        const baseReward = parseInt(contributionPoints) * 10;\n        \n        if (baseReward > 0) {\n            setTimeout(() => {\n                window.tuTienApp.showNotification(\n                    'Phần Thưởng Đạo Lữ', \n                    `Nhận được ${baseReward} linh thạch từ đạo lữ!`, \n                    'success'\n                );\n            }, Math.random() * 5000);\n        }\n    }\n\n    setupAchievementTracking() {\n        // Track expedition-related achievements\n        const userExpeditions = document.querySelectorAll('.user-expedition-item');\n        \n        if (userExpeditions.length >= 5) {\n            window.tuTienApp.showNotification(\n                'Thành Tựu Mở Khóa!', \n                'Đạt thành tựu \"Đạo Lữ Gia Dày Dạn\"', \n                'achievement'\n            );\n        }\n    }\n\n    startExpeditionUpdates() {\n        // Start periodic updates for expeditions\n        this.expeditionTimer = setInterval(() => {\n            this.updateAllExpeditions();\n        }, 60000); // Update every minute\n    }\n\n    updateAllExpeditions() {\n        this.updateActiveExpeditions();\n        this.updateAvailableExpeditions();\n        this.checkExpeditionCompletion();\n    }\n\n    updateActiveExpeditions() {\n        const activeExpeditions = document.querySelectorAll('.active-expedition-item');\n        activeExpeditions.forEach(expedition => {\n            this.updateExpeditionProgress(expedition);\n        });\n    }\n\n    updateExpeditionProgress(expeditionElement) {\n        const progressBar = expeditionElement.querySelector('.progress-bar');\n        if (progressBar) {\n            const currentWidth = parseFloat(progressBar.style.width) || 0;\n            const newWidth = Math.min(currentWidth + Math.random() * 5, 100);\n            progressBar.style.width = `${newWidth}%`;\n            \n            if (newWidth >= 100) {\n                this.completeExpedition(expeditionElement);\n            }\n        }\n    }\n\n    completeExpedition(expeditionElement) {\n        expeditionElement.classList.add('expedition-completed');\n        \n        // Show completion effect\n        this.showExpeditionCompletionEffect();\n        \n        // Process rewards\n        this.processRewards(expeditionElement);\n    }\n\n    showExpeditionCompletionEffect() {\n        window.tuTienApp.showNotification(\n            'Đạo Lữ Hoàn Thành!', \n            'Một đạo lữ của bạn đã hoàn thành thành công!', \n            'success'\n        );\n    }\n\n    updateAvailableExpeditions() {\n        // Randomly add new expeditions\n        if (Math.random() < 0.1) { // 10% chance\n            this.addNewExpedition();\n        }\n    }\n\n    addNewExpedition() {\n        const expeditionNames = [\n            \"Khám Phá Hang Động Bí Ẩn\",\n            \"Tìm Kiếm Thiên Tài Địa Bảo\",\n            \"Săn Lùng Ác Quỷ\",\n            \"Thu Thập Linh Thảo Quý\",\n            \"Khảo Sát Vùng Đất Mới\"\n        ];\n        \n        const randomName = expeditionNames[Math.floor(Math.random() * expeditionNames.length)];\n        \n        window.tuTienApp.showNotification(\n            'Đạo Lữ Mới!', \n            `Đạo lữ \"${randomName}\" vừa được công bố!`, \n            'info'\n        );\n    }\n\n    checkExpeditionCompletion() {\n        // Check for expeditions that should be completed\n        const expeditions = document.querySelectorAll('.expedition-item[data-end-time]');\n        const now = new Date();\n        \n        expeditions.forEach(expedition => {\n            const endTime = new Date(expedition.dataset.endTime);\n            if (now >= endTime && !expedition.classList.contains('completed')) {\n                this.completeExpedition(expedition);\n            }\n        });\n    }\n\n    // Cleanup\n    destroy() {\n        if (this.expeditionTimer) {\n            clearInterval(this.expeditionTimer);\n        }\n    }\n}\n\n// Global expedition functions\nasync function joinExpedition(expeditionId) {\n    if (window.expeditionManager) {\n        await window.expeditionManager.handleJoinExpedition(expeditionId);\n    }\n}\n\nfunction generateRoute() {\n    if (window.expeditionManager) {\n        window.expeditionManager.generateAIRoute();\n    }\n}\n\nfunction updateRangeValue(input, displayId) {\n    const display = document.getElementById(displayId);\n    if (display) {\n        display.textContent = input.value;\n    }\n    \n    // Update route suggestions if this is difficulty slider\n    if (input.name === 'difficulty_level' && window.expeditionManager) {\n        window.expeditionManager.updateRouteSuggestions(parseInt(input.value));\n    }\n}\n\nfunction leaveExpedition(expeditionId) {\n    if (confirm('Bạn có chắc muốn rời khỏi đạo lữ này?')) {\n        fetch(`/api/leave-expedition/${expeditionId}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Requested-With': 'XMLHttpRequest'\n            }\n        })\n        .then(response => response.json())\n        .then(data => {\n            if (data.success) {\n                window.tuTienApp.showNotification('Rời Đạo Lữ', 'Đã rời khỏi đạo lữ thành công!', 'info');\n                location.reload();\n            } else {\n                window.tuTienApp.showNotification('Lỗi', data.error, 'error');\n            }\n        })\n        .catch(error => {\n            window.tuTienApp.showNotification('Lỗi', 'Không thể rời đạo lữ!', 'error');\n        });\n    }\n}\n\nfunction viewExpeditionDetails(expeditionId) {\n    // Implementation for viewing detailed expedition information\n    window.tuTienApp.showNotification('Chi Tiết Đạo Lữ', 'Tính năng xem chi tiết sẽ được phát triển!', 'info');\n}\n\n// Initialize expedition manager on page load\ndocument.addEventListener('DOMContentLoaded', () => {\n    if (document.body.classList.contains('expeditions-page') || window.location.pathname.includes('expeditions')) {\n        window.expeditionManager = new ExpeditionManager();\n        console.log('Expedition Manager initialized successfully!');\n    }\n});\n","size_bytes":35411},"static/js/guild.js":{"content":"// Guild Management JavaScript functionality\nclass GuildManager {\n    constructor() {\n        this.currentGuild = null;\n        this.warPredictions = [];\n        this.memberUpdateTimer = null;\n        this.init();\n    }\n\n    init() {\n        this.setupGuildActions();\n        this.setupWarSystem();\n        this.setupMemberManagement();\n        this.setupAIIntegration();\n        this.startGuildUpdates();\n    }\n\n    setupGuildActions() {\n        // Guild creation form handling\n        const createGuildForm = document.getElementById('createGuildForm');\n        if (createGuildForm) {\n            createGuildForm.addEventListener('submit', (e) => {\n                e.preventDefault();\n                this.handleGuildCreation();\n            });\n        }\n\n        // Guild settings\n        const guildSettingsForm = document.getElementById('guildSettingsForm');\n        if (guildSettingsForm) {\n            guildSettingsForm.addEventListener('submit', (e) => {\n                e.preventDefault();\n                this.updateGuildSettings();\n            });\n        }\n\n        // Guild recruitment toggle\n        const recruitmentToggle = document.getElementById('recruitmentToggle');\n        if (recruitmentToggle) {\n            recruitmentToggle.addEventListener('change', (e) => {\n                this.toggleRecruitment(e.target.checked);\n            });\n        }\n    }\n\n    async handleGuildCreation() {\n        const form = document.getElementById('createGuildForm');\n        if (!form) {\n            console.error('Guild creation form not found');\n            return;\n        }\n\n        const formData = new FormData(form);\n        \n        const guildData = {\n            name: formData.get('name'),\n            description: formData.get('description')\n        };\n\n        const submitBtn = form.querySelector('button[type=\"submit\"]');\n        const originalText = submitBtn ? submitBtn.innerHTML : '';\n        if (submitBtn) {\n            showLoading(submitBtn);\n        }\n\n        try {\n            const response = await fetch('/api/create-guild', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-Requested-With': 'XMLHttpRequest'\n                },\n                body: JSON.stringify(guildData)\n            });\n\n            const data = await response.json();\n\n            if (data.success) {\n                window.tuTienApp.showNotification(\n                    'Bang Hội Thành Lập!', \n                    data.message, \n                    'success'\n                );\n                \n                // Close modal and refresh page\n                closeCreateGuildModal();\n                \n                setTimeout(() => {\n                    location.reload();\n                }, 1500);\n            } else {\n                throw new Error(data.error || 'Không thể tạo bang hội');\n            }\n        } catch (error) {\n            console.error('Guild creation error:', error);\n            window.tuTienApp.showNotification('Lỗi Tạo Bang Hội', error.message, 'error');\n        } finally {\n            if (submitBtn) {\n                hideLoading(submitBtn, originalText);\n            }\n        }\n    }\n\n    async updateGuildSettings() {\n        const form = document.getElementById('guildSettingsForm');\n        const formData = new FormData(form);\n        \n        const settings = {\n            description: formData.get('description'),\n            recruitment_open: formData.get('recruitment_open') === 'on',\n            min_cultivation_level: formData.get('min_cultivation_level')\n        };\n\n        try {\n            const response = await fetch('/api/update-guild-settings', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-Requested-With': 'XMLHttpRequest'\n                },\n                body: JSON.stringify(settings)\n            });\n\n            const data = await response.json();\n\n            if (data.success) {\n                window.tuTienApp.showNotification('Cập Nhật Thành Công', 'Cài đặt bang hội đã được lưu', 'success');\n                const modal = bootstrap.Modal.getInstance(document.getElementById('guildSettingsModal'));\n                modal?.hide();\n            } else {\n                throw new Error(data.error || 'Không thể cập nhật cài đặt');\n            }\n        } catch (error) {\n            window.tuTienApp.showNotification('Lỗi Cập Nhật', error.message, 'error');\n        }\n    }\n\n    async toggleRecruitment(isOpen) {\n        try {\n            const response = await fetch('/api/toggle-guild-recruitment', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-Requested-With': 'XMLHttpRequest'\n                },\n                body: JSON.stringify({ recruitment_open: isOpen })\n            });\n\n            const data = await response.json();\n\n            if (data.success) {\n                const status = isOpen ? 'mở' : 'đóng';\n                window.tuTienApp.showNotification(\n                    'Tuyển Thành Viên', \n                    `Đã ${status} tuyển thành viên`, \n                    'info'\n                );\n            } else {\n                throw new Error(data.error);\n            }\n        } catch (error) {\n            window.tuTienApp.showNotification('Lỗi', error.message, 'error');\n        }\n    }\n\n    setupWarSystem() {\n        // War declaration form\n        const declareWarForm = document.getElementById('declareWarForm');\n        if (declareWarForm) {\n            declareWarForm.addEventListener('submit', (e) => {\n                e.preventDefault();\n                this.handleWarDeclaration();\n            });\n        }\n\n        // War prediction refresh\n        const refreshPredictionsBtn = document.getElementById('refreshWarPredictions');\n        if (refreshPredictionsBtn) {\n            refreshPredictionsBtn.addEventListener('click', () => {\n                this.refreshWarPredictions();\n            });\n        }\n    }\n\n    async handleWarDeclaration() {\n        const form = document.getElementById('declareWarForm');\n        const formData = new FormData(form);\n        \n        const warData = {\n            target_guild_id: formData.get('target_guild_id'),\n            war_type: formData.get('war_type')\n        };\n\n        if (!warData.target_guild_id || !warData.war_type) {\n            window.tuTienApp.showNotification('Lỗi', 'Vui lòng điền đầy đủ thông tin!', 'warning');\n            return;\n        }\n\n        const submitBtn = form.querySelector('button[type=\"submit\"]');\n        const originalText = submitBtn ? submitBtn.innerHTML : '';\n        if (submitBtn) {\n            showLoading(submitBtn);\n        }\n\n        try {\n            const response = await fetch('/api/declare-war', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-Requested-With': 'XMLHttpRequest'\n                },\n                body: JSON.stringify(warData)\n            });\n\n            const data = await response.json();\n\n            if (data.success) {\n                this.showWarDeclarationEffect(warData.war_type);\n                window.tuTienApp.showNotification(\n                    'Tuyên Chiến Thành Công!', \n                    `Đã tuyên ${warData.war_type} với bang hội mục tiêu`, \n                    'warning'\n                );\n                \n                // Close modal and refresh\n                const modal = bootstrap.Modal.getInstance(document.getElementById('declareWarModal'));\n                modal.hide();\n                \n                setTimeout(() => {\n                    location.reload();\n                }, 2000);\n            } else {\n                throw new Error(data.error || 'Không thể tuyên chiến');\n            }\n        } catch (error) {\n            console.error('War declaration error:', error);\n            window.tuTienApp.showNotification('Lỗi Tuyên Chiến', error.message, 'error');\n        } finally {\n            if (submitBtn) {\n                hideLoading(submitBtn, originalText);\n            }\n        }\n    }\n\n    showWarDeclarationEffect(warType) {\n        // Create dramatic war declaration effect\n        const effect = document.createElement('div');\n        effect.className = 'war-declaration-effect';\n        effect.innerHTML = `\n            <div class=\"war-effect-content\">\n                <h1 class=\"war-title\">⚔️ TUYÊN CHIẾN! ⚔️</h1>\n                <h2 class=\"war-type\">${warType}</h2>\n                <div class=\"war-flames\"></div>\n            </div>\n        `;\n        effect.style.cssText = `\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: radial-gradient(circle, rgba(220, 53, 69, 0.4), rgba(0, 0, 0, 0.8));\n            z-index: 10000;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            animation: warDeclarationFade 3s ease-out forwards;\n        `;\n\n        // Add war effect styles\n        if (!document.getElementById('war-effects-style')) {\n            const style = document.createElement('style');\n            style.id = 'war-effects-style';\n            style.textContent = `\n                @keyframes warDeclarationFade {\n                    0% { opacity: 0; }\n                    20% { opacity: 1; }\n                    80% { opacity: 1; }\n                    100% { opacity: 0; }\n                }\n                .war-title {\n                    color: #dc3545;\n                    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);\n                    font-size: 3rem;\n                    margin-bottom: 1rem;\n                    animation: shake 0.5s infinite;\n                }\n                .war-type {\n                    color: #ffd700;\n                    font-size: 2rem;\n                    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);\n                }\n                @keyframes shake {\n                    0%, 100% { transform: translateX(0); }\n                    25% { transform: translateX(-5px); }\n                    75% { transform: translateX(5px); }\n                }\n            `;\n            document.head.appendChild(style);\n        }\n\n        document.body.appendChild(effect);\n        \n        // Auto remove after animation\n        setTimeout(() => effect.remove(), 3000);\n\n        // Play war sound effect\n        this.playWarSound();\n    }\n\n    playWarSound() {\n        // Create dramatic war sound\n        if (typeof AudioContext !== 'undefined' || typeof webkitAudioContext !== 'undefined') {\n            const audioContext = new (AudioContext || webkitAudioContext)();\n            \n            // Create a more complex war sound\n            const oscillator1 = audioContext.createOscillator();\n            const oscillator2 = audioContext.createOscillator();\n            const gainNode = audioContext.createGain();\n\n            oscillator1.connect(gainNode);\n            oscillator2.connect(gainNode);\n            gainNode.connect(audioContext.destination);\n\n            oscillator1.frequency.setValueAtTime(220, audioContext.currentTime);\n            oscillator2.frequency.setValueAtTime(110, audioContext.currentTime);\n            \n            oscillator1.frequency.exponentialRampToValueAtTime(440, audioContext.currentTime + 0.3);\n            oscillator2.frequency.exponentialRampToValueAtTime(220, audioContext.currentTime + 0.3);\n            \n            gainNode.gain.setValueAtTime(0.4, audioContext.currentTime);\n            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 1.5);\n\n            oscillator1.start(audioContext.currentTime);\n            oscillator1.stop(audioContext.currentTime + 1.5);\n            oscillator2.start(audioContext.currentTime);\n            oscillator2.stop(audioContext.currentTime + 1.5);\n        }\n    }\n\n    async refreshWarPredictions() {\n        const container = document.querySelector('.war-predictions-container');\n        if (!container) return;\n\n        container.innerHTML = '<div class=\"text-center\"><div class=\"loading-spinner\"></div><p class=\"text-light mt-2\">AI đang phân tích chiến lực...</p></div>';\n\n        try {\n            const response = await fetch('/api/refresh-war-predictions', {\n                method: 'GET',\n                headers: {\n                    'X-Requested-With': 'XMLHttpRequest'\n                }\n            });\n\n            const data = await response.json();\n\n            if (data.success) {\n                this.renderWarPredictions(data.predictions);\n                window.tuTienApp.showNotification('AI Phân Tích', 'Đã cập nhật dự đoán chiến tranh!', 'info');\n            } else {\n                throw new Error(data.error);\n            }\n        } catch (error) {\n            container.innerHTML = '<p class=\"text-danger\">Không thể tải dự đoán chiến tranh</p>';\n            window.tuTienApp.showNotification('Lỗi', error.message, 'error');\n        }\n    }\n\n    renderWarPredictions(predictions) {\n        const container = document.querySelector('.war-predictions-container');\n        if (!container) return;\n\n        container.innerHTML = predictions.map(prediction => `\n            <div class=\"col-lg-4 mb-3\">\n                <div class=\"prediction-card\">\n                    <h6 class=\"text-purple\">${prediction.target_guild_name}</h6>\n                    <div class=\"prediction-stats\">\n                        <div class=\"d-flex justify-content-between mb-2\">\n                            <span class=\"text-light\">Tỷ Lệ Thắng:</span>\n                            <span class=\"text-${prediction.win_probability > 60 ? 'success' : prediction.win_probability > 40 ? 'warning' : 'danger'}\">\n                                ${prediction.win_probability}%\n                            </span>\n                        </div>\n                        <div class=\"d-flex justify-content-between mb-2\">\n                            <span class=\"text-light\">Thời Gian Dự Kiến:</span>\n                            <span class=\"text-celestial\">${prediction.duration_days} ngày</span>\n                        </div>\n                        <div class=\"d-flex justify-content-between\">\n                            <span class=\"text-light\">Tổn Thất:</span>\n                            <span class=\"text-${prediction.casualty_estimate === 'Cao' ? 'danger' : 'warning'}\">\n                                ${prediction.casualty_estimate}\n                            </span>\n                        </div>\n                    </div>\n                    <div class=\"prediction-actions mt-3\">\n                        <button class=\"btn btn-sm btn-outline-purple mystical-btn w-100\" \n                                onclick=\"guildManager.declareWarAgainst('${prediction.target_guild_id}', '${prediction.target_guild_name}')\">\n                            <i class=\"fas fa-sword me-1\"></i>Tuyên Chiến\n                        </button>\n                    </div>\n                </div>\n            </div>\n        `).join('');\n    }\n\n    setupMemberManagement() {\n        // Member promotion/demotion\n        this.setupMemberActions();\n        \n        // Member kick functionality\n        this.setupMemberKick();\n        \n        // Join request handling\n        this.setupJoinRequests();\n    }\n\n    setupMemberActions() {\n        document.addEventListener('click', (e) => {\n            if (e.target.matches('[data-action=\"promote\"]')) {\n                const memberId = e.target.dataset.memberId;\n                this.promoteMember(memberId);\n            }\n            \n            if (e.target.matches('[data-action=\"demote\"]')) {\n                const memberId = e.target.dataset.memberId;\n                this.demoteMember(memberId);\n            }\n            \n            if (e.target.matches('[data-action=\"kick\"]')) {\n                const memberId = e.target.dataset.memberId;\n                const memberName = e.target.dataset.memberName;\n                this.kickMember(memberId, memberName);\n            }\n        });\n    }\n\n    async promoteMember(memberId) {\n        if (!confirm('Bạn có chắc muốn thăng chức cho thành viên này?')) return;\n\n        try {\n            const response = await fetch('/api/promote-member', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-Requested-With': 'XMLHttpRequest'\n                },\n                body: JSON.stringify({ member_id: memberId })\n            });\n\n            const data = await response.json();\n\n            if (data.success) {\n                window.tuTienApp.showNotification('Thăng Chức', 'Đã thăng chức thành viên!', 'success');\n                this.refreshMemberList();\n            } else {\n                throw new Error(data.error);\n            }\n        } catch (error) {\n            window.tuTienApp.showNotification('Lỗi', error.message, 'error');\n        }\n    }\n\n    setupMemberKick() {\n        // Member kick functionality is handled by setupMemberActions\n        // This function is required but the logic is in setupMemberActions\n    }\n\n    async demoteMember(memberId) {\n        if (!confirm('Bạn có chắc muốn giáng chức cho thành viên này?')) return;\n\n        try {\n            const response = await fetch('/api/demote-member', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-Requested-With': 'XMLHttpRequest'\n                },\n                body: JSON.stringify({ member_id: memberId })\n            });\n\n            const data = await response.json();\n\n            if (data.success) {\n                window.tuTienApp.showNotification('Giáng Chức', 'Đã giáng chức thành viên!', 'warning');\n                this.refreshMemberList();\n            } else {\n                throw new Error(data.error);\n            }\n        } catch (error) {\n            window.tuTienApp.showNotification('Lỗi', error.message, 'error');\n        }\n    }\n\n    async kickMember(memberId, memberName) {\n        if (!confirm(`Bạn có chắc muốn đuổi ${memberName} khỏi bang hội?`)) return;\n\n        try {\n            const response = await fetch('/api/kick-member', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-Requested-With': 'XMLHttpRequest'\n                },\n                body: JSON.stringify({ member_id: memberId })\n            });\n\n            const data = await response.json();\n\n            if (data.success) {\n                window.tuTienApp.showNotification('Đuổi Thành Viên', `Đã đuổi ${memberName} khỏi bang hội!`, 'warning');\n                this.refreshMemberList();\n            } else {\n                throw new Error(data.error);\n            }\n        } catch (error) {\n            window.tuTienApp.showNotification('Lỗi', error.message, 'error');\n        }\n    }\n\n    setupJoinRequests() {\n        const joinRequestsContainer = document.getElementById('joinRequestsContainer');\n        if (joinRequestsContainer) {\n            this.loadJoinRequests();\n        }\n    }\n\n    async loadJoinRequests() {\n        try {\n            const response = await fetch('/api/guild-join-requests', {\n                headers: {\n                    'X-Requested-With': 'XMLHttpRequest'\n                }\n            });\n\n            const data = await response.json();\n\n            if (data.success) {\n                this.renderJoinRequests(data.requests);\n            }\n        } catch (error) {\n            console.error('Failed to load join requests:', error);\n        }\n    }\n\n    renderJoinRequests(requests) {\n        const container = document.getElementById('joinRequestsContainer');\n        if (!container) return;\n\n        if (requests.length === 0) {\n            container.innerHTML = '<p class=\"text-muted\">Không có yêu cầu gia nhập nào</p>';\n            return;\n        }\n\n        container.innerHTML = requests.map(request => `\n            <div class=\"join-request-item mb-2\">\n                <div class=\"d-flex justify-content-between align-items-center\">\n                    <div>\n                        <strong class=\"text-golden\">${request.user_name}</strong>\n                        <small class=\"text-muted d-block\">${request.cultivation_level}</small>\n                        <small class=\"text-celestial\">${request.spiritual_power} Linh Lực</small>\n                    </div>\n                    <div>\n                        <button class=\"btn btn-sm btn-success mystical-btn me-2\" \n                                onclick=\"guildManager.handleJoinRequest(${request.id}, true)\">\n                            <i class=\"fas fa-check\"></i>\n                        </button>\n                        <button class=\"btn btn-sm btn-danger mystical-btn\" \n                                onclick=\"guildManager.handleJoinRequest(${request.id}, false)\">\n                            <i class=\"fas fa-times\"></i>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        `).join('');\n    }\n\n    async handleJoinRequest(requestId, accept) {\n        try {\n            const response = await fetch('/api/handle-join-request', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-Requested-With': 'XMLHttpRequest'\n                },\n                body: JSON.stringify({ \n                    request_id: requestId, \n                    accept: accept \n                })\n            });\n\n            const data = await response.json();\n\n            if (data.success) {\n                const action = accept ? 'chấp nhận' : 'từ chối';\n                window.tuTienApp.showNotification('Yêu Cầu Gia Nhập', `Đã ${action} yêu cầu!`, accept ? 'success' : 'info');\n                this.loadJoinRequests();\n                if (accept) {\n                    this.refreshMemberList();\n                }\n            } else {\n                throw new Error(data.error);\n            }\n        } catch (error) {\n            window.tuTienApp.showNotification('Lỗi', error.message, 'error');\n        }\n    }\n\n    setupAIIntegration() {\n        // AI guild strategy advisor\n        const aiStrategyBtn = document.getElementById('aiStrategyBtn');\n        if (aiStrategyBtn) {\n            aiStrategyBtn.addEventListener('click', () => {\n                this.openAIStrategy();\n            });\n        }\n\n        // Guild performance analytics\n        this.setupGuildAnalytics();\n    }\n\n    openAIStrategy() {\n        const modal = document.createElement('div');\n        modal.className = 'modal fade';\n        modal.innerHTML = `\n            <div class=\"modal-dialog modal-lg\">\n                <div class=\"modal-content mystical-modal\">\n                    <div class=\"modal-header border-bottom border-secondary\">\n                        <h5 class=\"modal-title text-golden\">\n                            <i class=\"fas fa-chess me-2\"></i>AI Chiến Thuật Bang Hội\n                        </h5>\n                        <button type=\"button\" class=\"btn-close btn-close-white\" data-bs-dismiss=\"modal\"></button>\n                    </div>\n                    <div class=\"modal-body\">\n                        <div class=\"ai-strategy-container\">\n                            <div class=\"text-center\">\n                                <div class=\"loading-spinner\"></div>\n                                <p class=\"text-light mt-2\">AI đang phân tích tình hình bang hội...</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        document.body.appendChild(modal);\n        const bootstrapModal = new bootstrap.Modal(modal);\n        bootstrapModal.show();\n\n        // Generate AI strategy\n        this.generateAIStrategy(modal);\n\n        // Clean up on close\n        modal.addEventListener('hidden.bs.modal', () => {\n            modal.remove();\n        });\n    }\n\n    async generateAIStrategy(modal) {\n        try {\n            // Simulate AI analysis\n            await new Promise(resolve => setTimeout(resolve, 2000));\n\n            const strategies = [\n                {\n                    title: \"Tăng Cường Tuyển Dụng\",\n                    description: \"Bang hội cần thêm thành viên mạnh. Nên hạ thấp yêu cầu tuyển dụng và tích cực tìm kiếm tài năng.\",\n                    priority: \"Cao\",\n                    impact: \"Tăng 30% sức mạnh tổng thể\"\n                },\n                {\n                    title: \"Phát Triển Kinh Tế\",\n                    description: \"Tập trung vào các hoạt động tăng kho bạc bang hội. Khuyến khích thành viên đóng góp tài nguyên.\",\n                    priority: \"Trung Bình\",\n                    impact: \"Tăng 50% kho bạc trong 1 tháng\"\n                },\n                {\n                    title: \"Mở Rộng Lãnh Thổ\",\n                    description: \"Thời điểm tốt để chinh phục thêm lãnh thổ. Có thể tuyên chiến với bang hội yếu hơn.\",\n                    priority: \"Thấp\",\n                    impact: \"Tăng 2-3 lãnh thổ mới\"\n                }\n            ];\n\n            const container = modal.querySelector('.ai-strategy-container');\n            container.innerHTML = `\n                <h6 class=\"text-celestial mb-3\">Khuyến Nghị Chiến Thuật</h6>\n                ${strategies.map(strategy => `\n                    <div class=\"strategy-card mb-3\">\n                        <div class=\"d-flex justify-content-between align-items-start mb-2\">\n                            <h6 class=\"text-purple\">${strategy.title}</h6>\n                            <span class=\"priority-badge priority-${strategy.priority.toLowerCase()}\">\n                                ${strategy.priority}\n                            </span>\n                        </div>\n                        <p class=\"text-light\">${strategy.description}</p>\n                        <div class=\"strategy-impact\">\n                            <small class=\"text-golden\">\n                                <i class=\"fas fa-arrow-up me-1\"></i>\n                                Tác động: ${strategy.impact}\n                            </small>\n                        </div>\n                    </div>\n                `).join('')}\n                \n                <div class=\"ai-conclusion mt-4 p-3 bg-dark bg-opacity-25 rounded\">\n                    <h6 class=\"text-golden\">Kết Luận AI</h6>\n                    <p class=\"text-light mb-0\">\n                        Bang hội đang trong giai đoạn phát triển tốt. Ưu tiên tuyển dụng thành viên chất lượng \n                        và tăng cường hoạt động kinh tế để chuẩn bị cho các cuộc chiến lớn.\n                    </p>\n                </div>\n            `;\n\n            // Add strategy styles\n            if (!document.getElementById('strategy-styles')) {\n                const style = document.createElement('style');\n                style.id = 'strategy-styles';\n                style.textContent = `\n                    .strategy-card {\n                        background: rgba(79, 172, 254, 0.1);\n                        border: 1px solid rgba(79, 172, 254, 0.3);\n                        border-radius: 10px;\n                        padding: 1rem;\n                    }\n                    .priority-badge {\n                        padding: 0.25rem 0.5rem;\n                        border-radius: 12px;\n                        font-size: 0.75rem;\n                        font-weight: 600;\n                    }\n                    .priority-cao { background: rgba(220, 53, 69, 0.2); color: #dc3545; }\n                    .priority-trung-bình { background: rgba(255, 193, 7, 0.2); color: #ffc107; }\n                    .priority-thấp { background: rgba(40, 167, 69, 0.2); color: #28a745; }\n                `;\n                document.head.appendChild(style);\n            }\n\n        } catch (error) {\n            const container = modal.querySelector('.ai-strategy-container');\n            container.innerHTML = '<p class=\"text-danger\">Không thể tải chiến thuật AI</p>';\n        }\n    }\n\n    setupGuildAnalytics() {\n        // Create guild performance chart\n        const analyticsContainer = document.getElementById('guildAnalytics');\n        if (analyticsContainer) {\n            this.renderGuildAnalytics();\n        }\n    }\n\n    renderGuildAnalytics() {\n        // This would render guild performance charts\n        // Implementation depends on specific analytics requirements\n    }\n\n    refreshMemberList() {\n        // Refresh the member list display\n        setTimeout(() => {\n            location.reload();\n        }, 1000);\n    }\n\n    startGuildUpdates() {\n        // Update guild information periodically\n        this.memberUpdateTimer = setInterval(() => {\n            this.updateGuildStats();\n        }, 60000); // Update every minute\n    }\n\n    updateGuildStats() {\n        // Update guild statistics in real-time\n        this.updateMemberActivity();\n        this.updateGuildResources();\n        this.checkWarStatus();\n    }\n\n    updateMemberActivity() {\n        const memberItems = document.querySelectorAll('.member-item');\n        memberItems.forEach(item => {\n            // Add activity indicators\n            if (Math.random() < 0.3) {\n                item.classList.add('member-active');\n                setTimeout(() => {\n                    item.classList.remove('member-active');\n                }, 2000);\n            }\n        });\n    }\n\n    updateGuildResources() {\n        const treasuryEl = document.querySelector('[data-guild-treasury]');\n        if (treasuryEl) {\n            const current = parseInt(treasuryEl.textContent.replace(/[^\\d]/g, '')) || 0;\n            const increase = Math.floor(Math.random() * 100) + 50;\n            window.tuTienApp.animateNumberChange(treasuryEl, current + increase);\n        }\n    }\n\n    checkWarStatus() {\n        // Check for war status updates\n        const warCards = document.querySelectorAll('.war-card');\n        warCards.forEach(card => {\n            // Add pulsing effect for active wars\n            if (Math.random() < 0.2) {\n                card.style.animation = 'pulse 1s ease-in-out';\n                setTimeout(() => {\n                    card.style.animation = '';\n                }, 1000);\n            }\n        });\n    }\n\n    // Cleanup\n    destroy() {\n        if (this.memberUpdateTimer) {\n            clearInterval(this.memberUpdateTimer);\n        }\n    }\n}\n\n// Global guild functions\n// Custom modal functions\nfunction openCreateGuildModal() {\n    const modal = document.getElementById('createGuildModal');\n    modal.style.display = 'block';\n    modal.classList.add('show');\n    modal.style.backgroundColor = 'rgba(15, 15, 35, 0.8)';\n    document.body.style.overflow = 'hidden';\n    \n    // Reset form\n    const form = document.getElementById('createGuildForm');\n    form.reset();\n    \n    // Add click outside to close\n    modal.addEventListener('click', function(e) {\n        if (e.target === modal) {\n            closeCreateGuildModal();\n        }\n    });\n}\n\nfunction closeCreateGuildModal() {\n    const modal = document.getElementById('createGuildModal');\n    modal.style.display = 'none';\n    modal.classList.remove('show');\n    document.body.style.overflow = '';\n    \n    // Remove any lingering backdrops\n    const backdrops = document.querySelectorAll('.modal-backdrop');\n    backdrops.forEach(backdrop => backdrop.remove());\n    document.body.classList.remove('modal-open');\n    document.body.style.paddingRight = '';\n}\n\nasync function createGuild() {\n    if (window.guildManager) {\n        await window.guildManager.handleGuildCreation();\n    }\n}\n\nfunction declareWarAgainst(guildId, guildName) {\n    // Pre-fill war declaration form\n    const targetSelect = document.querySelector('select[name=\"target_guild_id\"]');\n    if (targetSelect) {\n        targetSelect.value = guildId;\n    }\n    \n    // Open war declaration modal\n    const modal = new bootstrap.Modal(document.getElementById('declareWarModal'));\n    modal.show();\n}\n\nfunction requestJoinGuild(guildId) {\n    if (confirm('Bạn có muốn gửi yêu cầu gia nhập bang hội này?')) {\n        fetch('/api/request-join-guild', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Requested-With': 'XMLHttpRequest'\n            },\n            body: JSON.stringify({ guild_id: guildId })\n        })\n        .then(response => response.json())\n        .then(data => {\n            if (data.success) {\n                window.tuTienApp.showNotification('Yêu Cầu Gửi', 'Đã gửi yêu cầu gia nhập bang hội!', 'success');\n            } else {\n                window.tuTienApp.showNotification('Lỗi', data.error, 'error');\n            }\n        })\n        .catch(error => {\n            window.tuTienApp.showNotification('Lỗi', 'Không thể gửi yêu cầu!', 'error');\n        });\n    }\n}\n\nfunction viewGuildDetails(guildId) {\n    // Implementation for viewing guild details\n    window.tuTienApp.showNotification('Thông Tin Bang Hội', 'Tính năng xem chi tiết sẽ được phát triển!', 'info');\n}\n\nfunction viewWarDetails(warId) {\n    // Implementation for viewing war details\n    window.tuTienApp.showNotification('Chi Tiết Chiến Tranh', 'Tính năng xem chi tiết chiến tranh sẽ được phát triển!', 'info');\n}\n\nfunction sendReinforcments(warId) {\n    // Implementation for sending reinforcements\n    window.tuTienApp.showNotification('Viện Trợ', 'Tính năng viện trợ chiến tranh sẽ được phát triển!', 'info');\n}\n\n// Initialize guild manager on page load\ndocument.addEventListener('DOMContentLoaded', () => {\n    if (document.body.classList.contains('guild-page') || window.location.pathname.includes('guild')) {\n        window.guildManager = new GuildManager();\n        console.log('Guild Manager initialized successfully!');\n    }\n});\n","size_bytes":34536},"static/js/main.js":{"content":"// Main JavaScript functionality for Tu Tien Community Platform\n// Global variables and utilities\n\nclass TuTienApp {\n    constructor() {\n        this.currentUser = null;\n        this.notifications = [];\n        this.chatSocket = null;\n        this.init();\n    }\n\n    init() {\n        this.setupEventListeners();\n        this.initializeNotifications();\n        this.startPeriodicUpdates();\n        this.setupMysticalEffects();\n    }\n\n    setupEventListeners() {\n        // Global click handlers\n        document.addEventListener('click', (e) => {\n            // Handle mystical button effects\n            if (e.target.classList.contains('mystical-btn')) {\n                this.createMysticalEffect(e.target);\n            }\n\n            // Handle card hover effects\n            if (e.target.closest('.mystical-card')) {\n                this.enhanceCardEffect(e.target.closest('.mystical-card'));\n            }\n        });\n\n        // Global keyboard shortcuts\n        document.addEventListener('keydown', (e) => {\n            // Quick cultivation (Ctrl + Space)\n            if (e.ctrlKey && e.code === 'Space') {\n                e.preventDefault();\n                this.quickCultivate();\n            }\n\n            // Quick chat (Ctrl + Enter)\n            if (e.ctrlKey && e.key === 'Enter') {\n                const chatInput = document.getElementById('messageInput');\n                if (chatInput && chatInput.value.trim()) {\n                    e.preventDefault();\n                    this.sendQuickMessage();\n                }\n            }\n        });\n\n        // Window resize handler\n        window.addEventListener('resize', () => {\n            this.handleResponsiveAdjustments();\n        });\n\n        // Page visibility change\n        document.addEventListener('visibilitychange', () => {\n            if (document.hidden) {\n                this.pauseUpdates();\n            } else {\n                this.resumeUpdates();\n            }\n        });\n    }\n\n    initializeNotifications() {\n        // Check for browser notification permission\n        if ('Notification' in window && Notification.permission === 'default') {\n            Notification.requestPermission();\n        }\n\n        // Setup notification container\n        this.createNotificationContainer();\n    }\n\n    createNotificationContainer() {\n        if (!document.getElementById('notification-container')) {\n            const container = document.createElement('div');\n            container.id = 'notification-container';\n            container.className = 'notification-container';\n            container.innerHTML = `\n                <style>\n                .notification-container {\n                    position: fixed;\n                    top: 100px;\n                    right: 20px;\n                    z-index: 9999;\n                    max-width: 400px;\n                }\n                .mystical-notification {\n                    background: rgba(26, 26, 46, 0.95);\n                    border: 1px solid rgba(255, 215, 0, 0.3);\n                    border-radius: 10px;\n                    padding: 1rem;\n                    margin-bottom: 0.5rem;\n                    backdrop-filter: blur(10px);\n                    animation: slideInRight 0.3s ease-out;\n                    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);\n                }\n                @keyframes slideInRight {\n                    from { transform: translateX(100%); opacity: 0; }\n                    to { transform: translateX(0); opacity: 1; }\n                }\n                .notification-close {\n                    float: right;\n                    background: none;\n                    border: none;\n                    color: #ffd700;\n                    cursor: pointer;\n                    font-size: 1.2rem;\n                }\n                </style>\n            `;\n            document.body.appendChild(container);\n        }\n    }\n\n    showNotification(title, message, type = 'info', duration = 5000) {\n        const container = document.getElementById('notification-container');\n        const notification = document.createElement('div');\n        notification.className = `mystical-notification notification-${type}`;\n        \n        const iconMap = {\n            'info': 'fas fa-info-circle',\n            'success': 'fas fa-check-circle',\n            'warning': 'fas fa-exclamation-triangle',\n            'error': 'fas fa-times-circle',\n            'cultivation': 'fas fa-meditation',\n            'achievement': 'fas fa-trophy'\n        };\n\n        notification.innerHTML = `\n            <button class=\"notification-close\" onclick=\"this.parentElement.remove()\">&times;</button>\n            <div class=\"d-flex align-items-start\">\n                <i class=\"${iconMap[type] || iconMap.info} text-${this.getNotificationColor(type)} me-2 mt-1\"></i>\n                <div>\n                    <h6 class=\"text-golden mb-1\">${title}</h6>\n                    <p class=\"text-light mb-0\">${message}</p>\n                </div>\n            </div>\n        `;\n\n        container.appendChild(notification);\n\n        // Auto remove after duration\n        setTimeout(() => {\n            if (notification.parentElement) {\n                notification.style.animation = 'slideOutRight 0.3s ease-in';\n                setTimeout(() => notification.remove(), 300);\n            }\n        }, duration);\n\n        // Browser notification for important messages\n        if (type === 'achievement' || type === 'warning') {\n            this.showBrowserNotification(title, message);\n        }\n    }\n\n    getNotificationColor(type) {\n        const colorMap = {\n            'info': 'celestial',\n            'success': 'success',\n            'warning': 'warning',\n            'error': 'danger',\n            'cultivation': 'purple',\n            'achievement': 'golden'\n        };\n        return colorMap[type] || 'celestial';\n    }\n\n    showBrowserNotification(title, message) {\n        if ('Notification' in window && Notification.permission === 'granted') {\n            new Notification(`Tu Tiên - ${title}`, {\n                body: message,\n                icon: '/static/images/logo.png',\n                badge: '/static/images/badge.png'\n            });\n        }\n    }\n\n    createMysticalEffect(element) {\n        // Create floating particles effect\n        for (let i = 0; i < 5; i++) {\n            const particle = document.createElement('div');\n            particle.className = 'mystical-particle';\n            particle.style.cssText = `\n                position: fixed;\n                width: 4px;\n                height: 4px;\n                background: #ffd700;\n                border-radius: 50%;\n                pointer-events: none;\n                z-index: 9998;\n                animation: floatUp 1s ease-out forwards;\n            `;\n\n            const rect = element.getBoundingClientRect();\n            particle.style.left = (rect.left + Math.random() * rect.width) + 'px';\n            particle.style.top = (rect.top + Math.random() * rect.height) + 'px';\n\n            document.body.appendChild(particle);\n\n            setTimeout(() => particle.remove(), 1000);\n        }\n\n        // Add CSS for particle animation if not exists\n        if (!document.getElementById('mystical-effects-style')) {\n            const style = document.createElement('style');\n            style.id = 'mystical-effects-style';\n            style.textContent = `\n                @keyframes floatUp {\n                    0% { transform: translateY(0) scale(1); opacity: 1; }\n                    100% { transform: translateY(-50px) scale(0); opacity: 0; }\n                }\n            `;\n            document.head.appendChild(style);\n        }\n    }\n\n    enhanceCardEffect(card) {\n        // Add subtle glow effect\n        card.style.transition = 'all 0.3s ease';\n        card.style.boxShadow = '0 20px 40px rgba(0, 0, 0, 0.4), 0 0 20px rgba(255, 215, 0, 0.1)';\n        \n        setTimeout(() => {\n            card.style.boxShadow = '';\n        }, 300);\n    }\n\n    setupMysticalEffects() {\n        // Floating particles background\n        this.createFloatingParticles();\n\n        // Mystical cursor trail\n        this.setupCursorTrail();\n\n        // Dynamic background effects\n        this.setupDynamicBackground();\n    }\n\n    createFloatingParticles() {\n        const particleContainer = document.querySelector('.floating-particles');\n        if (!particleContainer) return;\n\n        setInterval(() => {\n            if (Math.random() < 0.3) { // 30% chance every interval\n                const particle = document.createElement('div');\n                particle.className = 'bg-particle';\n                particle.style.cssText = `\n                    position: absolute;\n                    width: ${Math.random() * 4 + 2}px;\n                    height: ${Math.random() * 4 + 2}px;\n                    background: ${Math.random() > 0.5 ? '#ffd700' : '#4facfe'};\n                    border-radius: 50%;\n                    left: ${Math.random() * 100}%;\n                    top: 100%;\n                    opacity: ${Math.random() * 0.6 + 0.2};\n                    animation: floatUp ${Math.random() * 10 + 15}s linear forwards;\n                `;\n                particleContainer.appendChild(particle);\n\n                setTimeout(() => particle.remove(), 25000);\n            }\n        }, 2000);\n    }\n\n    setupCursorTrail() {\n        let trail = [];\n        const maxTrailLength = 10;\n\n        document.addEventListener('mousemove', (e) => {\n            // Add current position to trail\n            trail.push({ x: e.clientX, y: e.clientY, time: Date.now() });\n\n            // Remove old trail points\n            trail = trail.filter(point => Date.now() - point.time < 1000);\n\n            // Limit trail length\n            if (trail.length > maxTrailLength) {\n                trail.shift();\n            }\n\n            // Create trail particles occasionally\n            if (Math.random() < 0.1) {\n                this.createTrailParticle(e.clientX, e.clientY);\n            }\n        });\n    }\n\n    createTrailParticle(x, y) {\n        const particle = document.createElement('div');\n        particle.style.cssText = `\n            position: fixed;\n            width: 2px;\n            height: 2px;\n            background: rgba(255, 215, 0, 0.6);\n            border-radius: 50%;\n            pointer-events: none;\n            z-index: 9997;\n            left: ${x}px;\n            top: ${y}px;\n            animation: fadeOut 0.8s ease-out forwards;\n        `;\n\n        if (!document.getElementById('cursor-trail-style')) {\n            const style = document.createElement('style');\n            style.id = 'cursor-trail-style';\n            style.textContent = `\n                @keyframes fadeOut {\n                    from { opacity: 0.6; transform: scale(1); }\n                    to { opacity: 0; transform: scale(0); }\n                }\n            `;\n            document.head.appendChild(style);\n        }\n\n        document.body.appendChild(particle);\n        setTimeout(() => particle.remove(), 800);\n    }\n\n    setupDynamicBackground() {\n        // Randomly change background gradient intensity\n        setInterval(() => {\n            const mysticalBg = document.querySelector('.mystical-bg');\n            if (mysticalBg) {\n                const intensity = Math.random() * 0.1 + 0.05;\n                mysticalBg.style.opacity = intensity;\n            }\n        }, 5000);\n    }\n\n    startPeriodicUpdates() {\n        // Update every 30 seconds\n        this.updateInterval = setInterval(() => {\n            this.updateUserStats();\n            this.checkForNotifications();\n            this.updateOnlineStatus();\n        }, 30000);\n\n        // Update every 5 minutes\n        this.longUpdateInterval = setInterval(() => {\n            this.updateGuildInfo();\n            this.updateExpeditions();\n        }, 300000);\n    }\n\n    pauseUpdates() {\n        if (this.updateInterval) {\n            clearInterval(this.updateInterval);\n            this.updateInterval = null;\n        }\n        if (this.longUpdateInterval) {\n            clearInterval(this.longUpdateInterval);\n            this.longUpdateInterval = null;\n        }\n    }\n\n    resumeUpdates() {\n        if (!this.updateInterval) {\n            this.startPeriodicUpdates();\n        }\n    }\n\n    updateUserStats() {\n        // This would typically fetch from server\n        // For now, just simulate updates\n        const spiritualPowerEl = document.querySelector('[data-spiritual-power]');\n        if (spiritualPowerEl) {\n            const currentPower = parseInt(spiritualPowerEl.textContent.replace(/[^\\d]/g, ''));\n            const newPower = currentPower + Math.floor(Math.random() * 10);\n            this.animateNumberChange(spiritualPowerEl, newPower);\n        }\n    }\n\n    animateNumberChange(element, newValue) {\n        const currentValue = parseInt(element.textContent.replace(/[^\\d]/g, '')) || 0;\n        const duration = 1000;\n        const steps = 30;\n        const stepValue = (newValue - currentValue) / steps;\n        let currentStep = 0;\n\n        const animation = setInterval(() => {\n            currentStep++;\n            const value = Math.floor(currentValue + (stepValue * currentStep));\n            element.textContent = value.toLocaleString();\n\n            if (currentStep >= steps) {\n                clearInterval(animation);\n                element.textContent = newValue.toLocaleString();\n            }\n        }, duration / steps);\n    }\n\n    checkForNotifications() {\n        // Simulate checking for new notifications\n        if (Math.random() < 0.1) { // 10% chance\n            const notifications = [\n                { title: 'Tu Luyện Thành Công', message: 'Bạn đã tăng 50 điểm linh lực!', type: 'cultivation' },\n                { title: 'Thành Viên Mới', message: 'Có thiên đạo mới gia nhập bang hội!', type: 'info' },\n                { title: 'Đạo Lữ Sắp Bắt Đầu', message: 'Đạo lữ \"Rừng Tre Xanh\" sẽ bắt đầu trong 5 phút!', type: 'warning' }\n            ];\n            \n            const randomNotification = notifications[Math.floor(Math.random() * notifications.length)];\n            this.showNotification(randomNotification.title, randomNotification.message, randomNotification.type);\n        }\n    }\n\n    updateOnlineStatus() {\n        // Update online user count and status\n        const onlineCountEl = document.querySelector('[data-online-count]');\n        if (onlineCountEl) {\n            const count = Math.floor(Math.random() * 50) + 20;\n            onlineCountEl.textContent = count;\n        }\n    }\n\n    updateGuildInfo() {\n        // Update guild-related information\n        console.log('Updating guild information...');\n    }\n\n    updateExpeditions() {\n        // Update expedition status\n        console.log('Updating expedition information...');\n    }\n\n    quickCultivate() {\n        // Quick cultivation function\n        const cultivateBtn = document.querySelector('[onclick*=\"cultivate\"]');\n        if (cultivateBtn) {\n            cultivateBtn.click();\n        } else {\n            this.showNotification('Tu Luyện', 'Không thể tu luyện ở trang này!', 'warning');\n        }\n    }\n\n    sendQuickMessage() {\n        const chatInput = document.getElementById('messageInput');\n        if (chatInput && chatInput.value.trim()) {\n            const form = chatInput.closest('form');\n            if (form) {\n                form.dispatchEvent(new Event('submit'));\n            }\n        }\n    }\n\n    handleResponsiveAdjustments() {\n        // Adjust UI elements for different screen sizes\n        const isMobile = window.innerWidth <= 768;\n        const cards = document.querySelectorAll('.mystical-card');\n        \n        cards.forEach(card => {\n            if (isMobile) {\n                card.style.margin = '0.5rem 0';\n            } else {\n                card.style.margin = '';\n            }\n        });\n    }\n\n    // Utility functions\n    formatNumber(num) {\n        if (num >= 1000000000) {\n            return (num / 1000000000).toFixed(1) + 'T';\n        } else if (num >= 1000000) {\n            return (num / 1000000).toFixed(1) + 'M';\n        } else if (num >= 1000) {\n            return (num / 1000).toFixed(1) + 'K';\n        }\n        return num.toString();\n    }\n\n    formatTime(seconds) {\n        const hours = Math.floor(seconds / 3600);\n        const minutes = Math.floor((seconds % 3600) / 60);\n        const secs = seconds % 60;\n        \n        if (hours > 0) {\n            return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n        } else {\n            return `${minutes}:${secs.toString().padStart(2, '0')}`;\n        }\n    }\n\n    getCultivationStageColor(stage) {\n        const colorMap = {\n            'Luyện Khí': '#6c757d',\n            'Trúc Cơ': '#007bff',\n            'Kết Đan': '#ffc107',\n            'Nguyên Anh': '#dc3545',\n            'Hóa Thần': '#8e2de2',\n            'Luyện Hư': '#20c997',\n            'Hợp Thể': '#fd7e14',\n            'Đại Thừa': '#e83e8c',\n            'Độ Kiếp': '#6f42c1',\n            'Tản Tiên': '#ffd700'\n        };\n        \n        for (const [stageName, color] of Object.entries(colorMap)) {\n            if (stage.includes(stageName)) {\n                return color;\n            }\n        }\n        return '#6c757d';\n    }\n\n    // API helper functions\n    async makeRequest(url, options = {}) {\n        try {\n            const response = await fetch(url, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-Requested-With': 'XMLHttpRequest',\n                    ...options.headers\n                },\n                ...options\n            });\n\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Request failed:', error);\n            this.showNotification('Lỗi', 'Có lỗi xảy ra khi kết nối với server!', 'error');\n            throw error;\n        }\n    }\n\n    // Initialize on page load\n    static initialize() {\n        document.addEventListener('DOMContentLoaded', () => {\n            window.tuTienApp = new TuTienApp();\n            console.log('Tu Tien App initialized successfully!');\n        });\n    }\n}\n\n// Auto-initialize\nTuTienApp.initialize();\n\n// Global utility functions\nfunction showLoading(element) {\n    if (element) {\n        element.innerHTML = '<div class=\"loading-spinner\"></div>';\n        element.disabled = true;\n    }\n}\n\nfunction hideLoading(element, originalContent) {\n    if (element) {\n        element.innerHTML = originalContent;\n        element.disabled = false;\n    }\n}\n\nfunction copyToClipboard(text) {\n    navigator.clipboard.writeText(text).then(() => {\n        if (window.tuTienApp) {\n            window.tuTienApp.showNotification('Thành Công', 'Đã sao chép vào clipboard!', 'success');\n        }\n    }).catch(err => {\n        console.error('Failed to copy: ', err);\n    });\n}\n\nfunction formatCultivationLevel(level) {\n    const stages = {\n        'Luyện Khí': '练气',\n        'Trúc Cơ': '筑基',\n        'Kết Đan': '结丹',\n        'Nguyên Anh': '元婴',\n        'Hóa Thần': '化神',\n        'Luyện Hư': '炼虚',\n        'Hợp Thể': '合体',\n        'Đại Thừa': '大乘',\n        'Độ Kiếp': '渡劫',\n        'Tản Tiên': '散仙'\n    };\n    \n    for (const [vietnamese, chinese] of Object.entries(stages)) {\n        if (level.includes(vietnamese)) {\n            return level.replace(vietnamese, `${vietnamese} ${chinese}`);\n        }\n    }\n    return level;\n}\n\n// Export for use in other scripts\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = TuTienApp;\n}\n","size_bytes":19806},"static/js/community.js":{"content":"// Community Chat and Trading JavaScript functionality\nclass CommunityManager {\n    constructor() {\n        this.currentChannel = 'general';\n        this.messagePollingTimer = null;\n        this.init();\n    }\n\n    init() {\n        this.setupChatSystem();\n        this.setupModalHandlers();\n        this.startMessagePolling();\n        this.loadInitialMessages();\n    }\n\n    setupChatSystem() {\n        // Chat form submission\n        const chatForm = document.getElementById('chatForm');\n        if (chatForm) {\n            chatForm.addEventListener('submit', (e) => {\n                e.preventDefault();\n                this.sendMessage();\n            });\n        }\n\n        // Channel switching\n        const channelSelect = document.getElementById('chatChannel');\n        if (channelSelect) {\n            channelSelect.addEventListener('change', (e) => {\n                this.switchChannel(e.target.value);\n            });\n        }\n    }\n\n    setupModalHandlers() {\n        // Setup modal close handlers for community modals\n        document.addEventListener('click', (e) => {\n            if (e.target.matches('.modal') && e.target.style.display === 'block') {\n                this.closeModal(e.target.id);\n            }\n        });\n    }\n\n    async sendMessage() {\n        const messageInput = document.getElementById('messageInput');\n        const content = messageInput.value.trim();\n        \n        if (!content) return;\n\n        try {\n            const response = await fetch('/api/send-message', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    content: content,\n                    channel: this.currentChannel,\n                    channel_id: this.currentChannel === 'guild' ? window.userGuildId : null\n                })\n            });\n\n            const data = await response.json();\n\n            if (data.success) {\n                messageInput.value = '';\n                this.loadMessages(); // Reload messages to show the new one\n            } else {\n                alert('Lỗi: ' + (data.error || 'Không thể gửi tin nhắn'));\n            }\n        } catch (error) {\n            console.error('Error sending message:', error);\n            alert('Có lỗi xảy ra khi gửi tin nhắn!');\n        }\n    }\n\n    switchChannel(channel) {\n        this.currentChannel = channel;\n        this.loadMessages();\n    }\n\n    async loadMessages() {\n        try {\n            const response = await fetch(`/api/get-messages?channel=${this.currentChannel}`);\n            const data = await response.json();\n\n            if (data.success) {\n                this.displayMessages(data.messages);\n            }\n        } catch (error) {\n            console.error('Error loading messages:', error);\n        }\n    }\n\n    loadInitialMessages() {\n        // Load initial messages from server-rendered data if available\n        const messagesContainer = document.getElementById('chatMessages');\n        if (messagesContainer && messagesContainer.children.length === 1) {\n            // Only loading spinner present, load messages\n            this.loadMessages();\n        }\n    }\n\n    displayMessages(messages) {\n        const messagesContainer = document.getElementById('chatMessages');\n        messagesContainer.innerHTML = '';\n\n        if (messages.length === 0) {\n            messagesContainer.innerHTML = `\n                <div class=\"text-center py-4\">\n                    <i class=\"fas fa-comments text-muted\" style=\"font-size: 3rem;\"></i>\n                    <p class=\"text-muted mt-2\">Chưa có tin nhắn nào trong kênh này</p>\n                </div>\n            `;\n            return;\n        }\n\n        messages.reverse().forEach(message => {\n            const messageElement = this.createMessageElement(message);\n            messagesContainer.appendChild(messageElement);\n        });\n\n        // Scroll to bottom\n        messagesContainer.scrollTop = messagesContainer.scrollHeight;\n    }\n\n    createMessageElement(message) {\n        const messageDiv = document.createElement('div');\n        messageDiv.className = `chat-message ${message.user_id === window.currentUserId ? 'own-message' : ''}`;\n        \n        const timeStr = new Date(message.created_at).toLocaleTimeString('vi-VN', {\n            hour: '2-digit',\n            minute: '2-digit'\n        });\n\n        messageDiv.innerHTML = `\n            <div class=\"message-header\">\n                <span class=\"message-author text-golden\">${message.user_name}</span>\n                <span class=\"message-time text-muted\">${timeStr}</span>\n            </div>\n            <div class=\"message-content text-light\">${this.escapeHtml(message.content)}</div>\n        `;\n\n        return messageDiv;\n    }\n\n    escapeHtml(text) {\n        const div = document.createElement('div');\n        div.textContent = text;\n        return div.innerHTML;\n    }\n\n    startMessagePolling() {\n        // Poll for new messages every 10 seconds\n        this.messagePollingTimer = setInterval(() => {\n            this.loadMessages();\n        }, 10000);\n    }\n\n    stopMessagePolling() {\n        if (this.messagePollingTimer) {\n            clearInterval(this.messagePollingTimer);\n            this.messagePollingTimer = null;\n        }\n    }\n\n    // Modal management functions\n    openModal(modalId) {\n        const modal = document.getElementById(modalId);\n        if (modal) {\n            modal.style.display = 'block';\n            modal.classList.add('show');\n            modal.style.backgroundColor = 'rgba(15, 15, 35, 0.8)';\n            document.body.style.overflow = 'hidden';\n        }\n    }\n\n    closeModal(modalId) {\n        const modal = document.getElementById(modalId);\n        if (modal) {\n            modal.style.display = 'none';\n            modal.classList.remove('show');\n            document.body.style.overflow = '';\n            \n            // Remove any lingering backdrops\n            const backdrops = document.querySelectorAll('.modal-backdrop');\n            backdrops.forEach(backdrop => backdrop.remove());\n            document.body.classList.remove('modal-open');\n            document.body.style.paddingRight = '';\n        }\n    }\n}\n\n// Global functions for community features\nfunction openBroadcastModal() {\n    if (window.communityManager) {\n        window.communityManager.openModal('broadcastModal');\n    }\n    // For now, show a simple prompt\n    const message = prompt('Nhập thông báo thiên hạ (tốn 1000 linh thạch):');\n    if (message && message.trim()) {\n        fetch('/api/send-broadcast', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ message: message.trim() })\n        })\n        .then(response => response.json())\n        .then(data => {\n            if (data.success) {\n                alert('Đã gửi thông báo thiên hạ thành công!');\n            } else {\n                alert('Lỗi: ' + (data.error || 'Không thể gửi thông báo'));\n            }\n        })\n        .catch(error => {\n            console.error('Error:', error);\n            alert('Có lỗi xảy ra!');\n        });\n    }\n}\n\nfunction openMentorRequestModal() {\n    const request = prompt('Mô tả yêu cầu tìm sư phụ:');\n    if (request && request.trim()) {\n        fetch('/api/mentor-request', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ request: request.trim() })\n        })\n        .then(response => response.json())\n        .then(data => {\n            if (data.success) {\n                alert('Đã đăng yêu cầu tìm sư phụ thành công!');\n            } else {\n                alert('Lỗi: ' + (data.error || 'Không thể đăng yêu cầu'));\n            }\n        })\n        .catch(error => {\n            console.error('Error:', error);\n            alert('Có lỗi xảy ra!');\n        });\n    }\n}\n\nfunction openTradeModal() {\n    const itemName = prompt('Tên vật phẩm muốn giao dịch:');\n    if (!itemName || !itemName.trim()) return;\n\n    const quantity = prompt('Số lượng:');\n    if (!quantity || isNaN(quantity) || parseInt(quantity) <= 0) {\n        alert('Số lượng không hợp lệ!');\n        return;\n    }\n\n    const price = prompt('Giá (linh thạch):');\n    if (!price || isNaN(price) || parseInt(price) <= 0) {\n        alert('Giá không hợp lệ!');\n        return;\n    }\n\n    const type = prompt('Loại giao dịch:\\n1. sell (Bán)\\n2. buy (Mua)\\n\\nNhập loại:');\n    if (!type || !['sell', 'buy'].includes(type.toLowerCase())) {\n        alert('Loại giao dịch không hợp lệ!');\n        return;\n    }\n\n    fetch('/api/create-trade', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            item_name: itemName.trim(),\n            quantity: parseInt(quantity),\n            price: parseInt(price),\n            trade_type: type.toLowerCase()\n        })\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (data.success) {\n            alert('Đã đăng giao dịch thành công!');\n        } else {\n            alert('Lỗi: ' + (data.error || 'Không thể tạo giao dịch'));\n        }\n    })\n    .catch(error => {\n        console.error('Error:', error);\n        alert('Có lỗi xảy ra khi tạo giao dịch!');\n    });\n}\n\nfunction sendMessage(event) {\n    if (event) {\n        event.preventDefault();\n    }\n    if (window.communityManager) {\n        window.communityManager.sendMessage();\n    }\n}\n\nfunction switchChannel() {\n    const channelSelect = document.getElementById('chatChannel');\n    if (channelSelect && window.communityManager) {\n        window.communityManager.switchChannel(channelSelect.value);\n    }\n}\n\n// Initialize community manager when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', function() {\n    window.communityManager = new CommunityManager();\n});","size_bytes":10119}},"version":1}